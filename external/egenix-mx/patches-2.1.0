--- egenix-mx-base-2.1.0/mxSetup.py	Tue May 17 00:35:03 2005
+++ egenix-mx-base-2.1.0-patched/mxSetup.py	Tue May 17 00:46:04 2005
@@ -152,9 +152,9 @@
 
 def mx_msvccompiler__init__(self, *args, **kws):
 
     apply(old_MSVCCompiler__init__, (self,) + args, kws)
-    self.compile_options.extend(['/O2','/Gf','/GB','/GD'])
+    #self.compile_options.extend(['/O2','/Gf','/GB','/GD'])
 
 # "install" new __init__
 MSVCCompiler.__init__ = mx_msvccompiler__init__ 

--- egenix-mx-base-2.1.0/mx/BeeBase/mxBeeBase/mxBeeBase.c	2001-12-20 13:01:53.000000000 -0800
+++ egenix-mx-base-2.1.0-patched/mx/BeeBase/mxBeeBase/mxBeeBase.c	2005-05-04 21:03:04.000000000 -0700
@@ -65,10 +65,10 @@
 /* --- forward declarations ----------------------------------------------- */
 
 staticforward PyTypeObject mxBeeIndex_Type;
-staticforward PyMethodDef mxBeeIndex_Methods[];
+extern PyMethodDef mxBeeIndex_Methods[];
 
 staticforward PyTypeObject mxBeeCursor_Type;
-staticforward PyMethodDef mxBeeCursor_Methods[];
+extern PyMethodDef mxBeeCursor_Methods[];
 
 staticforward
 mxBeeCursorObject *mxBeeCursor_New(mxBeeIndexObject *index,   /* Index object */
@@ -1200,7 +1200,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxBeeIndex_Methods[] =
 {   
     Py_MethodListEntry("get",mxBeeIndex_get),
@@ -1550,7 +1549,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxBeeCursor_Methods[] =
 {   
     Py_MethodListEntryNoArgs("next",mxBeeCursor_next),
--- egenix-mx-base-2.1.0/mx/DateTime/mxDateTime/mxDateTime.c	2001-12-10 02:15:49.000000000 -0800
+++ egenix-mx-base-2.1.0-patched/mx/DateTime/mxDateTime/mxDateTime.c	2005-05-04 20:57:39.000000000 -0700
@@ -76,8 +76,10 @@
 #define STRFTIME_OUTPUT_SIZE	1024
 
 /* Define these to have the module use free lists (saves malloc calls) */
+#ifndef Py_DEBUG
 #define MXDATETIME_FREELIST
 #define MXDATETIMEDELTA_FREELIST
+#endif
 
 /* Define this to enable the copy-protocol (__copy__, __deepcopy__) */
 #define COPY_PROTOCOL
@@ -160,10 +162,10 @@
 /* --- forward declarations ----------------------------------------------- */
 
 staticforward PyTypeObject mxDateTime_Type;
-staticforward PyMethodDef mxDateTime_Methods[];
+extern PyMethodDef mxDateTime_Methods[];
 
 staticforward PyTypeObject mxDateTimeDelta_Type;
-staticforward PyMethodDef mxDateTimeDelta_Methods[];
+extern PyMethodDef mxDateTimeDelta_Methods[];
 
 staticforward
 PyObject *mxDateTimeDelta_FromDaysEx(long days,
@@ -2291,7 +2293,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxDateTime_Methods[] =
 {   
 #ifdef HAVE_STRFTIME
@@ -3957,7 +3958,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxDateTimeDelta_Methods[] =
 {   
     Py_MethodListEntryNoArgs("absvalues",mxDateTimeDelta_absvalues),
--- egenix-mx-base-2.1.0/mx/Proxy/mxProxy/mxProxy.c	2001-12-20 11:57:46.000000000 -0800
+++ egenix-mx-base-2.1.0-patched/mx/Proxy/mxProxy/mxProxy.c	2005-05-04 20:58:16.000000000 -0700
@@ -66,7 +66,7 @@
 /* --- forward declarations ----------------------------------------------- */
 
 staticforward PyTypeObject mxProxy_Type;
-staticforward PyMethodDef mxProxy_Methods[];
+extern PyMethodDef mxProxy_Methods[];
 static int mxProxy_DefuncObjectReference(mxProxyObject *self);
 static int mxProxy_FinalizeWeakReferences(void);
 
@@ -1403,7 +1403,6 @@
 
  */
 
-statichere
 PyMethodDef mxProxy_Methods[] =
 {   
     Py_MethodListEntry("proxy_getattr",mxProxy_proxy_getattr),
--- egenix-mx-base-2.1.0/mx/Queue/mxQueue/mxQueue.c	2001-12-20 11:57:46.000000000 -0800
+++ egenix-mx-base-2.1.0-patched/mx/Queue/mxQueue/mxQueue.c	2005-05-04 21:00:15.000000000 -0700
@@ -58,7 +58,7 @@
 /* --- forward declarations ----------------------------------------------- */
 
 staticforward PyTypeObject mxQueue_Type;
-staticforward PyMethodDef mxQueue_Methods[];
+extern PyMethodDef mxQueue_Methods[];
 
 /* --- internal macros ---------------------------------------------------- */
 
@@ -904,7 +904,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxQueue_Methods[] =
 {   
     Py_MethodListEntrySingleArg("push",mxQueue_push),
--- egenix-mx-base-2.1.0/mx/Stack/mxStack/mxStack.c	2001-12-20 11:57:46.000000000 -0800
+++ egenix-mx-base-2.1.0-patched/mx/Stack/mxStack/mxStack.c	2005-05-04 21:00:43.000000000 -0700
@@ -58,7 +58,7 @@
 /* --- forward declarations ----------------------------------------------- */
 
 staticforward PyTypeObject mxStack_Type;
-staticforward PyMethodDef mxStack_Methods[];
+extern PyMethodDef mxStack_Methods[];
 
 /* --- internal macros ---------------------------------------------------- */
 
@@ -849,7 +849,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxStack_Methods[] =
 {   
     Py_MethodListEntrySingleArg("push",mxStack_push),
--- egenix-mx-base-2.1.0/mx/TextTools/mxTextTools/mxTextTools.c	2001-12-28 12:53:03.000000000 -0800
+++ egenix-mx-base-2.1.0-patched/mx/TextTools/mxTextTools/mxTextTools.c	2005-05-04 21:02:01.000000000 -0700
@@ -141,7 +141,7 @@
 
 /* --- Text Search Object ----------------------------------------------*/
 
-staticforward PyMethodDef mxTextSearch_Methods[];
+extern PyMethodDef mxTextSearch_Methods[];
 
 /* allocation */
 
@@ -897,7 +897,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxTextSearch_Methods[] =
 {   
     Py_MethodListEntry("search",mxTextSearch_search),
@@ -912,7 +911,7 @@
 
 /* --- Character Set Object --------------------------------------------*/
 
-staticforward PyMethodDef mxCharSet_Methods[];
+extern PyMethodDef mxCharSet_Methods[];
 
 /* internal */
 
@@ -2063,7 +2062,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxCharSet_Methods[] =
 {   
     Py_MethodListEntry("contains",mxCharSet_contains),
@@ -2081,7 +2079,7 @@
 
 /* --- Tag Table Object ------------------------------------------------*/
 
-staticforward PyMethodDef mxTagTable_Methods[];
+extern PyMethodDef mxTagTable_Methods[];
 
 PyObject *mxTagTable_New(PyObject *definition,
 			 int tabletype,
@@ -2891,7 +2889,6 @@
 
 /* Python Method Table */
 
-statichere
 PyMethodDef mxTagTable_Methods[] =
 {   
     Py_MethodListEntryNoArgs("compiled",mxTagTable_compiled),
--- egenix-mx-base-2.1.0/mx/DateTime/DateTime.py	Wed Oct 10 01:10:00 2001
+++ egenix-mx-base-2.1.0-patched/mx/DateTime/DateTime.py	Thu Nov 18 17:55:48 2004
@@ -532,17 +532,17 @@
             r.second = other.second or self.second
             return r
 
         else:
             raise TypeError,"can't add the two types"
 
     def __radd__(self,other,
                  # Locals:
-                 None=None,isinstance=isinstance,DateTimeType=DateTimeType,
+                 none=None,isinstance=isinstance,DateTimeType=DateTimeType,
                  DateTime=DateTime,DateTimeDelta=DateTimeDelta):
 
         if isinstance(other,DateTimeType):
             # DateTime (other) + RelativeDateTime (self)
 
             # date
             if self.year is None:
                 year = other.year + self.years
@@ -635,17 +635,17 @@
 
             return r
 
         else:
             raise TypeError,"can't subtract the two types"
 
     def __rsub__(self,other,
                  # Locals:
-                 None=None,isinstance=isinstance,DateTime=DateTime):
+                 none=None,isinstance=isinstance,DateTime=DateTime):
 
         if isinstance(other,DateTimeType):
             # DateTime (other) - RelativeDateTime (self)
             return other + self.__neg__()
 
         else:
             raise TypeError,"can't subtract the two types"
 
--- egenix-mx-base-2.1.0/mx/BeeBase/BeeDict.py	Sun Jun 24 04:54:25 2001
+++ egenix-mx-base-2.1.0-patched/mx/BeeBase/BeeDict.py	Thu Nov 18 17:58:16 2004
@@ -708,17 +708,17 @@
             # Ah, a collision
             address = self.find_address(cursor,hashvalue,key)
             if address is None:
                 return default
         return cursor
 
     def commit(self,
 
-               basemethod=BeeBaseDict.commit,None=None):
+               basemethod=BeeBaseDict.commit,none=None):
 
         """ Commit all changes and start a new transaction.
         """
         if __debug__:
             log(SYSTEM_DEBUG,'Committing all changes for "%s"...',self.name)
 
         # Write all changed entries in the cache to disk
         index = self.index
@@ -1027,17 +1027,17 @@
             self.validate_index()
             self.validate_storage()
 
         # Call basemethod
         basemethod(self)
 
     def commit(self,
 
-               basemethod=BeeBaseDict.commit,None=None):
+               basemethod=BeeBaseDict.commit,none=None):
 
         """ Commit all changes and start a new transaction.
         """
         if __debug__:
             log(SYSTEM_DEBUG,'Committing all changes for "%s"...',self.name)
 
         # Write all changed entries in the cache to disk
         index = self.index
--- egenix-mx-base-2.1.0/mx/BeeBase/BeeStorage.py	Fri Jul 20 08:17:46 2001
+++ egenix-mx-base-2.1.0-patched/mx/BeeBase/BeeStorage.py	Thu Nov 18 17:58:36 2004
@@ -427,17 +427,17 @@
     def __repr__(self):
 
         return '<%s instance for "%s" at 0x%x>' % (self.__class__.__name__,
                                                    self.filename,
                                                    id(self))
 
     def read_header(self,position,
 
-                    unpack=struct.unpack,BLOCKSIZE=BLOCKSIZE,None=None,
+                    unpack=struct.unpack,BLOCKSIZE=BLOCKSIZE,none=None,
                     ID=ID,headertypes=(OLD,VALID)):
 
         """ Read the header located at position and return
             a tuple (record size, statebyte, data area size).
             
             statebyte is one of the state constants. record size
             is the total number of bytes reserved for the record,
             data area size the number of bytes in its data area.
@@ -495,17 +495,17 @@
         file.seek(position)
         file.write(join((ID,pack('<l',recordsize),rtype),''))
         
         if self.caching:
             self.header_cache.put(position,(recordsize,rtype,recordsize-6))
 
     def write_record(self,data,position,minsize=0,rtype=VALID,
 
-                     BLOCKSIZE=BLOCKSIZE,None=None,pack=struct.pack,
+                     BLOCKSIZE=BLOCKSIZE,none=None,pack=struct.pack,
                      join=string.join,ID=ID,HOT=HOT):
 
         """ Write a record of given rtype (defaults to VALID)
             containing data to position.
 
             data is not encoded; caches are not used.  position may be
             EOF in which case the data is appended to the storage file
             (with proper padding). minsize can be set to a value
@@ -608,17 +608,17 @@
             method_mapply(self.caches,'delete',(position,))
 
     # Aliases
     delete = free
     __delitem__ = free
 
     def write(self,obj,position=None,
 
-              None=None):
+              none=None):
 
         """ Write the encoded object to the file and
             return the file address where the data was written.
 
             If position is given or None, the object is assumed to be
             replacing an old data record. The implementation tries to
             use the old record for writing the new data. In case it
             doesn't fit the old record is marked OLD and another
--- egenix-mx-base-2.1.0/mx/Tools/mxTools/bench2.py	Sun Jun 24 04:54:39 2001
+++ egenix-mx-base-2.1.0-patched/mx/Tools/mxTools/bench2.py	Thu Nov 18 17:58:54 2004
@@ -10,17 +10,17 @@
         x = lists(x)
 
 def f2():
 
     x = (a,a,a)
     for i in trange(100):
         x = tuples(x)
 
-def f3(apply=apply,map=map,None=None,tuple=tuple):
+def f3(apply=apply,map=map,none=None,tuple=tuple):
 
     x = (a,a,a)
     for i in trange(100):
         x = apply(map,(None,)+tuple(x))
 
 print 'lists:',hack.clock('f1()')
 print 'tuples:',hack.clock('f2()')
 print 'map:',hack.clock('f3()')
--- egenix-mx-base-2.1.0/mx/Tools/Tools.py	Mon Nov 26 11:40:06 2001
+++ egenix-mx-base-2.1.0-patched/mx/Tools/Tools.py	Thu Nov 18 17:59:19 2004
@@ -890,17 +890,17 @@
             locals[k] = v
     del frame,builtins,locals # better safe than sorry
 
 _basemethod_cache = {}
 
 def basemethod(object,method=None,
 
                cache = _basemethod_cache,InstanceType=types.InstanceType,
-               ClassType=types.ClassType,None=None):
+               ClassType=types.ClassType,none=None):
 
     """ Return the unbound method that is defined *after* method in the
         inheritance order of object with the same name as method
         (usually called base method or overridden method).
 
         object can be an instance, class or bound method. method, if
         given, may be a bound or unbound method. If it is not given,
         object must be bound method.
