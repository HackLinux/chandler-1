--- Python-2.3.4/Mac/OSX/Makefile	Tue Nov  4 14:45:16 2003
+++ Python-2.3.4-patched/Mac/OSX/Makefile	Thu Mar 11 00:55:56 2004
@@ -58,8 +58,7 @@
 compileall=$(srcdir)/Lib/compileall.py
 bundlebuilder=$(srcdir)/Lib/plat-mac/bundlebuilder.py
 
-installapps: install_PythonLauncher install_Python install_BuildApplet install_IDE \
-	install_IDLE install_PackageManager
+installapps: install_Python
 
 install_PythonLauncher:
 	cd $(srcdir)/Mac/OSX/PythonLauncher/PythonLauncher.pbproj ; \
--- Python-2.3.4/PC/getpathp.c	Mon Aug 18 10:54:10 2003
+++ Python-2.3.4-patched/PC/getpathp.c	Thu Mar 11 10:45:08 2004
@@ -479,8 +479,14 @@
 	}
  
 	skiphome = pythonhome==NULL ? 0 : 1;
-	machinepath = getpythonregpath(HKEY_LOCAL_MACHINE, skiphome);
-	userpath = getpythonregpath(HKEY_CURRENT_USER, skiphome);
+
+#if 0
+        /* Chandler doesn't want to grab registry info because we want to
+         * ignore extensions that the user already has installed.
+         */
+        machinepath = getpythonregpath(HKEY_LOCAL_MACHINE, skiphome);
+        userpath = getpythonregpath(HKEY_CURRENT_USER, skiphome);
+#endif
 	/* We only use the default relative PYTHONPATH if we havent
 	   anything better to use! */
 	skipdefault = envpath!=NULL || pythonhome!=NULL || \
--- Python-2.3.4/Lib/distutils/sysconfig.py	Mon Feb 10 06:02:33 2003
+++ Python-2.3.4-patched/Lib/distutils/sysconfig.py	Tue Mar 16 14:39:57 2004
@@ -149,6 +149,19 @@
         (cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = \
             get_config_vars('CC', 'CXX', 'OPT', 'BASECFLAGS', 'CCSHARED', 'LDSHARED', 'SO')
 
+        # Chandler: add the -F flag needed to compile to installed Framework
+        if ldshared.endswith('-framework Python'):
+            site = None
+            for path in sys.path:
+                if path.endswith('site-packages'):
+                    site = path
+                    break
+            if site is not None:
+                pos = site.find('Library/Frameworks')
+                if pos > 0:
+                    ldshared = "%s -F%s -framework Python" %(ldshared[:-18],
+                                                             site[0:pos+18])
+        
         if os.environ.has_key('CC'):
             cc = os.environ['CC']
         if os.environ.has_key('CXX'):
--- Python-2.3.4/Lib/distutils/command/build_ext.py	Tue Nov 19 05:12:28 2002
+++ Python-2.3.4-patched/Lib/distutils/command/build_ext.py	Wed Oct 13 22:27:02 2004
@@ -81,6 +81,10 @@
          "specify the compiler type"),
         ('swig-cpp', None,
          "make SWIG create C++ files (default is C)"),
+        ('swig-opts=', None,
+         "list of SWIG command line options"),
+        ('swig=', None,
+         "path to the SWIG executable"),
         ]
 
     boolean_options = ['inplace', 'debug', 'force', 'swig-cpp']
@@ -108,7 +112,8 @@
         self.force = None
         self.compiler = None
         self.swig_cpp = None
-
+        self.swig_opts = None
+        self.swig = None
 
     def finalize_options (self):
         from distutils import sysconfig
@@ -205,6 +210,11 @@
         if self.undef:
             self.undef = string.split(self.undef, ',')
 
+        if self.swig_opts is None:
+            self.swig_opts = []
+        else:
+            self.swig_opts = self.swig_opts.split(' ')
+
     # finalize_options ()
 
 
@@ -509,7 +519,7 @@
         # source -- but there should be an option to put SWIG output in
         # the temp dir.
 
-        if self.swig_cpp:
+        if self.swig_cpp or '-c++' in self.swig_opts:
             target_ext = '.cpp'
         else:
             target_ext = '.c'
@@ -526,8 +536,9 @@
         if not swig_sources:
             return new_sources
 
-        swig = self.find_swig()
-        swig_cmd = [swig, "-python"]
+        swig = self.swig or self.find_swig()
+        swig_cmd = [swig, '-python']
+        swig_cmd.extend(self.swig_opts)
         if self.swig_cpp:
             swig_cmd.append("-c++")
 
--- Python-2.3.4/Modules/_bsddb.c	Sun Sep 21 16:10:23 2003
+++ Python-2.3.4-patched/Modules/_bsddb.c	Mon Nov 15 18:14:40 2004
@@ -417,17 +417,17 @@
     d->doff = (unsigned int) doff;
     return 1;
 }
 
 
 /* Callback used to save away more information about errors from the DB
  * library. */
 static char _db_errmsg[1024];
-static void _db_errorCallback(const char* prefix, char* msg)
+static void _db_errorCallback(const DB_ENV *dbenv, const char* prefix, const char* msg)
 {
     strcpy(_db_errmsg, msg);
 }
 
 
 /* make a nice exception object to raise for errors. */
 static int makeDBError(int err)
 {
@@ -1982,17 +1982,17 @@
 
 
     if (!PyArg_ParseTuple(args, "|i:stat", &flags))
         return NULL;
     CHECK_DB_NOT_CLOSED(self);
 
     MYDB_BEGIN_ALLOW_THREADS;
 #if (DBVER >= 33)
-    err = self->db->stat(self->db, &sp, flags);
+    err = self->db->stat(self->db, NULL, &sp, flags);
 #else
     err = self->db->stat(self->db, &sp, NULL, flags);
 #endif
     MYDB_END_ALLOW_THREADS;
     RETURN_IF_ERR();
 
     self->haveStat = 1;
 
@@ -2244,17 +2244,17 @@
 
     if (self->haveStat) {  /* Has the stat function been called recently?  If
                               so, we can use the cached value. */
         flags = DB_CACHED_COUNTS;
     }
 
     MYDB_BEGIN_ALLOW_THREADS;
 #if (DBVER >= 33)
-    err = self->db->stat(self->db, &sp, flags);
+    err = self->db->stat(self->db, NULL, &sp, flags);
 #else
     err = self->db->stat(self->db, &sp, NULL, flags);
 #endif
     MYDB_END_ALLOW_THREADS;
 
     if (err)
         return -1;
 
@@ -4522,19 +4522,20 @@
 #endif
 
     ADD_INT(d, DB_LOCK_NOWAIT);
     ADD_INT(d, DB_LOCK_RECORD);
     ADD_INT(d, DB_LOCK_UPGRADE);
 
 #if (DBVER >= 33)
     ADD_INT(d, DB_LSTAT_ABORTED);
-    ADD_INT(d, DB_LSTAT_ERR);
+    ADD_INT(d, DB_LSTAT_EXPIRED);
     ADD_INT(d, DB_LSTAT_FREE);
     ADD_INT(d, DB_LSTAT_HELD);
+    ADD_INT(d, DB_LSTAT_NOTEXIST);
 #if (DBVER == 33)
     ADD_INT(d, DB_LSTAT_NOGRANT);
 #endif
     ADD_INT(d, DB_LSTAT_PENDING);
     ADD_INT(d, DB_LSTAT_WAITING);
 #endif
 
     ADD_INT(d, DB_ARCH_ABS);
--- Python-2.3.4/setup.py	Tue Oct 21 13:01:21 2003
+++ Python-2.3.4-patched/setup.py	Mon Nov 15 18:42:08 2004
@@ -511,16 +511,25 @@
                                 '/usr/local/BerkeleyDB.3.1/include',
                                 '/usr/local/include/db3',
                                 '/opt/sfw/include/db3',
                                 '/sw/include/db3',
                                 '/usr/include/db3',
                                 )},
             }
 
+        # for Chandler build
+        if os.environ.has_key('DB'):
+            DB = os.environ['DB']
+            db_try_this['db4']['libs'] = ('db-4.3', 'db43',)
+            db_try_this['db4']['libdirs'] = ( os.path.join(DB, 'lib'), )
+            db_try_this['db4']['incdirs'] = ( os.path.join(DB, 'include'), )
+            del db_try_this['db3']
+            print 'DB:', DB
+
         db_search_order = db_try_this.keys()
         db_search_order.sort()
         db_search_order.reverse()
 
         class found(Exception): pass
         try:
             # See whether there is a Sleepycat header in the standard
             # search path.
@@ -535,17 +544,17 @@
             for dbkey in db_search_order:
                 dbd = db_try_this[dbkey]
                 for dblib in dbd['libs']:
                     # Prefer version-specific includes over standard
                     # include locations.
                     db_incs = find_file('db.h', [], dbd['incdirs'])
                     dblib_dir = find_library_file(self.compiler,
                                                   dblib,
-                                                  lib_dirs,
+                                                  [],
                                                   list(dbd['libdirs']))
                     if (db_incs or dbkey == std_dbinc) and \
                            dblib_dir is not None:
                         dblibs = [dblib]
                         raise found
         except found:
             dblibs = [dblib]
             # A default source build puts Berkeley DB in something like
@@ -561,16 +570,17 @@
                                   runtime_library_dirs=dblib_dir,
                                   include_dirs=db_incs,
                                   libraries=dblibs))
         else:
             db_incs = None
             dblibs = []
             dblib_dir = None
 
+        print 'DB:', dblibs
 
         # Look for Berkeley db 1.85.   Note that it is built as a different
         # module name so it can be included even when later versions are
         # available.  A very restrictive search is performed to avoid
         # accidentally building this module with a later version of the
         # underlying db library.  May BSD-ish Unixes incorporate db 1.85
         # symbols into libc and place the include file in /usr/include.
         f = "/usr/include/db.h"
