--- Python-2.4b2/Mac/OSX/Makefile	Thu Nov 18 13:54:59 2004
+++ Python-2.4b2-patched/Mac/OSX/Makefile	Thu Nov 18 13:55:18 2004
@@ -54,18 +54,17 @@
 	Resources/English.lproj/Documentation/doc \
 	Resources/English.lproj/Documentation/ide
 DOCDIR=$(srcdir)/Mac/OSXResources/app/Resources/English.lproj/Documentation
 DOCINDEX=$(DOCDIR)/"Documentation idx"
 CACHERSRC=$(srcdir)/Mac/scripts/cachersrc.py
 compileall=$(srcdir)/Lib/compileall.py
 bundlebuilder=$(srcdir)/Lib/plat-mac/bundlebuilder.py
 
-installapps: install_PythonLauncher install_Python install_BuildApplet install_IDE \
-	install_IDLE install_PackageManager
+installapps: install_Python
 
 install_PythonLauncher:
 	cd $(srcdir)/Mac/OSX/PythonLauncher/PythonLauncher.pbproj ; \
 	$(PBXBUILD) -target PythonLauncher -buildstyle Deployment install \
 		DSTROOT=$(DESTDIR)/ INSTALL_PATH=$(PYTHONAPPSPATH)
 
 install_Python:
 	@if test ! -f $(DOCINDEX); then \
--- Python-2.4b2/PC/getpathp.c	Sat Aug  7 12:12:27 2004
+++ Python-2.4b2-patched/PC/getpathp.c	Thu Nov 18 14:00:18 2004
@@ -484,18 +484,23 @@
 		zip_path[len-2] = 'i';
 		zip_path[len-1] = 'p';
 	}
 	else {
 		zip_path[0] = 0;
 	}
  
 	skiphome = pythonhome==NULL ? 0 : 1;
-	machinepath = getpythonregpath(HKEY_LOCAL_MACHINE, skiphome);
-	userpath = getpythonregpath(HKEY_CURRENT_USER, skiphome);
+#if 0
+        /* Chandler doesn't want to grab registry info because we want to
+         * ignore extensions that the user already has installed.
+         */
+        machinepath = getpythonregpath(HKEY_LOCAL_MACHINE, skiphome);
+        userpath = getpythonregpath(HKEY_CURRENT_USER, skiphome);
+#endif
 	/* We only use the default relative PYTHONPATH if we havent
 	   anything better to use! */
 	skipdefault = envpath!=NULL || pythonhome!=NULL || \
 		      machinepath!=NULL || userpath!=NULL;
 #endif
 
 	/* We need to construct a path from the following parts.
 	   (1) the PYTHONPATH environment variable, if set;
--- Python-2.4b2/Lib/distutils/sysconfig.py	Wed Oct 13 08:54:16 2004
+++ Python-2.4b2-patched/Lib/distutils/sysconfig.py	Thu Nov 18 14:04:29 2004
@@ -144,16 +144,29 @@
 
     Mainly needed on Unix, so we can plug in the information that
     varies across Unices and is stored in Python's Makefile.
     """
     if compiler.compiler_type == "unix":
         (cc, cxx, opt, basecflags, ccshared, ldshared, so_ext) = \
             get_config_vars('CC', 'CXX', 'OPT', 'BASECFLAGS', 'CCSHARED', 'LDSHARED', 'SO')
 
+        # Chandler: add the -F flag needed to compile to installed Framework
+        if ldshared.endswith('-framework Python'):
+            site = None
+            for path in sys.path:
+                if path.endswith('site-packages'):
+                    site = path
+                    break
+            if site is not None:
+                pos = site.find('Library/Frameworks')
+                if pos > 0:
+                    ldshared = "%s -F%s -framework Python" %(ldshared[:-18],
+                                                             site[0:pos+18])
+        
         if os.environ.has_key('CC'):
             cc = os.environ['CC']
         if os.environ.has_key('CXX'):
             cxx = os.environ['CXX']
         if os.environ.has_key('LDSHARED'):
             ldshared = os.environ['LDSHARED']
         if os.environ.has_key('CPP'):
             cpp = os.environ['CPP']
--- Python-2.4b2/Modules/_bsddb.c	Fri Sep  3 18:36:59 2004
+++ Python-2.4b2-patched/Modules/_bsddb.c	Thu Nov 18 14:08:09 2004
@@ -461,17 +461,17 @@
     d->doff = (unsigned int) doff;
     return 1;
 }
 
 
 /* Callback used to save away more information about errors from the DB
  * library. */
 static char _db_errmsg[1024];
-static void _db_errorCallback(const char* prefix, char* msg)
+static void _db_errorCallback(const DB_ENV *dbenv, const char* prefix, const char* msg)
 {
     strcpy(_db_errmsg, msg);
 }
 
 
 /* make a nice exception object to raise for errors. */
 static int makeDBError(int err)
 {
@@ -2141,17 +2141,17 @@
 
 
     if (!PyArg_ParseTuple(args, "|i:stat", &flags))
         return NULL;
     CHECK_DB_NOT_CLOSED(self);
 
     MYDB_BEGIN_ALLOW_THREADS;
 #if (DBVER >= 33)
-    err = self->db->stat(self->db, &sp, flags);
+    err = self->db->stat(self->db, NULL, &sp, flags);
 #else
     err = self->db->stat(self->db, &sp, NULL, flags);
 #endif
     MYDB_END_ALLOW_THREADS;
     RETURN_IF_ERR();
 
     self->haveStat = 1;
 
@@ -2403,17 +2403,17 @@
 
     if (self->haveStat) {  /* Has the stat function been called recently?  If
                               so, we can use the cached value. */
         flags = DB_CACHED_COUNTS;
     }
 
     MYDB_BEGIN_ALLOW_THREADS;
 #if (DBVER >= 33)
-    err = self->db->stat(self->db, &sp, flags);
+    err = self->db->stat(self->db, NULL, &sp, flags);
 #else
     err = self->db->stat(self->db, &sp, NULL, flags);
 #endif
     MYDB_END_ALLOW_THREADS;
 
     if (err)
         return -1;
 
@@ -4898,19 +4898,20 @@
 #endif
 
     ADD_INT(d, DB_LOCK_NOWAIT);
     ADD_INT(d, DB_LOCK_RECORD);
     ADD_INT(d, DB_LOCK_UPGRADE);
 
 #if (DBVER >= 33)
     ADD_INT(d, DB_LSTAT_ABORTED);
-    ADD_INT(d, DB_LSTAT_ERR);
+    ADD_INT(d, DB_LSTAT_EXPIRED);
     ADD_INT(d, DB_LSTAT_FREE);
     ADD_INT(d, DB_LSTAT_HELD);
+    ADD_INT(d, DB_LSTAT_NOTEXIST);
 #if (DBVER == 33)
     ADD_INT(d, DB_LSTAT_NOGRANT);
 #endif
     ADD_INT(d, DB_LSTAT_PENDING);
     ADD_INT(d, DB_LSTAT_WAITING);
 #endif
 
     ADD_INT(d, DB_ARCH_ABS);
--- Python-2.4b2/setup.py	Wed Oct 13 08:54:16 2004
+++ Python-2.4b2-patched/setup.py	Thu Nov 18 14:09:48 2004
@@ -518,16 +518,25 @@
                                 '/usr/local/BerkeleyDB.3.2/include',
                                 '/usr/local/include/db3',
                                 '/opt/sfw/include/db3',
                                 '/sw/include/db3',
                                 '/usr/include/db3',
                                 )},
             }
 
+        # for Chandler build
+        if os.environ.has_key('DB'):
+            DB = os.environ['DB']
+            db_try_this['db4']['libs'] = ('db-4.3', 'db43',)
+            db_try_this['db4']['libdirs'] = ( os.path.join(DB, 'lib'), )
+            db_try_this['db4']['incdirs'] = ( os.path.join(DB, 'include'), )
+            del db_try_this['db3']
+            print 'DB:', DB
+
         db_search_order = db_try_this.keys()
         db_search_order.sort()
         db_search_order.reverse()
 
         class found(Exception): pass
         try:
             # See whether there is a Sleepycat header in the standard
             # search path.
@@ -542,17 +551,17 @@
             for dbkey in db_search_order:
                 dbd = db_try_this[dbkey]
                 for dblib in dbd['libs']:
                     # Prefer version-specific includes over standard
                     # include locations.
                     db_incs = find_file('db.h', [], dbd['incdirs'])
                     dblib_dir = find_library_file(self.compiler,
                                                   dblib,
-                                                  lib_dirs,
+                                                  [],
                                                   list(dbd['libdirs']))
                     if (db_incs or dbkey == std_dbinc) and \
                            dblib_dir is not None:
                         dblibs = [dblib]
                         raise found
         except found:
             dblibs = [dblib]
             # A default source build puts Berkeley DB in something like
@@ -568,16 +577,17 @@
                                   runtime_library_dirs=dblib_dir,
                                   include_dirs=db_incs,
                                   libraries=dblibs))
         else:
             db_incs = None
             dblibs = []
             dblib_dir = None
 
+        print 'DB:', dblibs
 
         # Look for Berkeley db 1.85.   Note that it is built as a different
         # module name so it can be included even when later versions are
         # available.  A very restrictive search is performed to avoid
         # accidentally building this module with a later version of the
         # underlying db library.  May BSD-ish Unixes incorporate db 1.85
         # symbols into libc and place the include file in /usr/include.
         f = "/usr/include/db.h"
