--- Twisted-r13651/twisted/topfiles/setup.py	Tue Mar 22 06:14:03 2005
+++ Twisted-r13651-patched/twisted/topfiles/setup.py	Wed Apr 20 12:14:36 2005
@@ -96,19 +96,15 @@
 
     # build stuff
     packages=dist.getPackages('twisted', ignore=dist.twisted_subprojects + ['plugins']),
     plugins=['__init__', 'notestplugin', 'testplugin', 'twisted_ftp', 'twisted_inet',
              'twisted_manhole', 'twisted_portforward', 'twisted_socks', 'twisted_telnet',
              'twisted_trial'],
     data_files=dist.getDataFiles('twisted', ignore=dist.twisted_subprojects),
     detectExtensions=detectExtensions,
-    scripts= [
-        'bin/manhole', 'bin/mktap', 'bin/twistd',
-        'bin/tap2deb', 'bin/tap2rpm', 'bin/tapconvert',
-        'bin/tkmktap', 'bin/trial',
-    ],
+    scripts= [],
 )
 
 
 if __name__ == '__main__':
     dist.setup(**setup_args)
 

diff -r -u8 Twisted-r13651/twisted/mail/pop3client.py Twisted-r13651-patched/twisted/mail/pop3client.py
--- Twisted-r13651/twisted/mail/pop3client.py	Fri Mar 18 17:49:40 2005
+++ Twisted-r13651-patched/twisted/mail/pop3client.py	Wed May  4 19:41:05 2005
@@ -11,28 +11,44 @@
 API Stability: Unstable
 """
 
 import re, md5
 
 from twisted.python import log
 from twisted.internet import defer
 from twisted.protocols import basic
+from twisted.protocols import policies
+from twisted.internet import error
+from twisted.internet import interfaces
 
 OK = '+OK'
 ERR = '-ERR'
 
 class POP3ClientError(Exception):
     """Base class for all exceptions raised by POP3Client.
     """
 
 class InsecureAuthenticationDisallowed(POP3ClientError):
     """Secure authentication was required but no mechanism could be found.
     """
 
+class TLSError(POP3ClientError):
+    """Secure authentication was required but no mechanism could be found.
+    """
+
+class TLSNotSupportedError(POP3ClientError):
+    """Secure authentication was required but no mechanism could be found.
+    """
+
+class OptionNotSupportedError(POP3ClientError):
+    """Secure authentication was required but no mechanism could be found.
+    """
+
+
 class ServerErrorResponse(POP3ClientError):
     """The server returned an error response to a request.
     """
     def __init__(self, reason, consumer=None):
         POP3ClientError.__init__(self, reason)
         self.consumer = consumer
 
 class LineTooLong(POP3ClientError):
@@ -50,21 +66,29 @@
     def __init__(self, L):
         self.L = L
     def setitem(self, (item, value)):
         diff = item - len(self.L) + 1
         if diff > 0:
             self.L.extend([None] * diff)
         self.L[item] = value
 
+
+def _statXform(line):
+    # Parse a STAT response
+    numMsgs, totalSize = line.split(None, 1)
+    return int(numMsgs), int(totalSize)
+
+
 def _listXform(line):
     # Parse a LIST response
     index, size = line.split(None, 1)
     return int(index) - 1, int(size)
 
+
 def _uidXform(line):
     # Parse a UIDL response
     index, uid = line.split(None, 1)
     return int(index) - 1, uid
 
 def _codeStatusSplit(line):
     # Parse an +OK or -ERR response
     parts = line.split(' ', 1)
@@ -77,65 +101,86 @@
     '.' characters which begin a line of a message are doubled to avoid
     confusing with the terminating '.\r\n' sequence.  This function unquotes
     them.
     """
     if line.startswith('..'):
         return line[1:]
     return line
 
-class POP3Client(basic.LineOnlyReceiver):
+class POP3Client(basic.LineOnlyReceiver, policies.TimeoutMixin):
     """POP3 client protocol implementation class
 
     Instances of this class provide a convenient, efficient API for
     retrieving and deleting messages from a POP3 server.
     """
 
+    # Capabilities are not allowed to change during the session
+    # So cache the first response and use that for all later
+    # lookups
+    _capCache = None
+
+    # Whether STARTTLS has been issued successfully yet or not.
+    startedTLS = False
+
     # Indicate whether login() should be allowed if the server
     # offers no authentication challenge and if our transport
     # does not offer any protection via encryption.
     allowInsecureLogin = False
 
     # Regular expression to search for in the challenge string in the server
     # greeting line.
     challengeMagicRe = re.compile('(<[^>]+>)')
 
-    # Challenge received from the server; set by the default
-    # serverGreeting implementation.
+    # Challenge received from the server
     serverChallenge = None
 
     # List of pending calls.
     # We are a pipelining API but don't actually
     # support pipelining on the network yet.
     _blockedQueue = None
 
     # The Deferred to which the very next result will go.
     waiting = None
 
+    # Number of seconds to wait before timing out a connection.
+    # If the number is <= 0 no timeout checking will be performed.
+    timeout = 0
+
+    #Overides LineOnlyReceiver to set a larger max length.
+    MAX_LENGTH = 16384 * 2
+
+    def __init__(self, contextFactory = None):
+        self.context = contextFactory
+        self.timedOut = False
+
+
     def _blocked(self, f, *a):
         # Internal helper.  If commands are being blocked, append
         # the given command and arguments to a list and return a Deferred
         # that will be chained with the return value of the function
         # when it eventually runs.  Otherwise, set up for commands to be
+
         # blocked and return None.
         if self._blockedQueue is not None:
             d = defer.Deferred()
             self._blockedQueue.append((d, f, a))
             return d
         self._blockedQueue = []
         return None
 
     def _unblock(self):
         # Internal helper.  Indicate that a function has completed.
         # If there are blocked commands, run the next one.  If there
         # are not, set up for the next command to not be blocked.
         if self._blockedQueue == []:
             self._blockedQueue = None
         elif self._blockedQueue is not None:
             d, f, a = self._blockedQueue.pop(0)
+
             d2 = f(*a)
             d2.chainDeferred(d)
 
     def sendShort(self, cmd, args):
         # Internal helper.  Send a command to which a short response
         # is expected.  Return a Deferred that fires when the response
         # is received.  Block all further commands from being sent until
         # the response is received.  Transition the state to SHORT.
@@ -152,46 +197,63 @@
         return self.waiting
 
     def sendLong(self, cmd, args, consumer, xform):
         # Internal helper.  Send a command to which a multiline
         # response is expected.  Return a Deferred that fires when
         # the entire response is received.  Block all further commands
         # from being sent until the entire response is received.
         # Transition the state to LONG_INITIAL.
-        d = self._blocked(self.sendLong, cmd, args, consumer)
+        d = self._blocked(self.sendLong, cmd, args, consumer, xform)
         if d is not None:
             return d
 
         if args:
             self.sendLine(cmd + ' ' + args)
         else:
             self.sendLine(cmd)
         self.state = 'LONG_INITIAL'
         self.xform = xform
         self.consumer = consumer
         self.waiting = defer.Deferred()
         return self.waiting
 
     # Twisted protocol callback
     def connectionMade(self):
+        if self.timeout > 0:
+            self.setTimeout(self.timeout)
+
         self.state = 'WELCOME'
 
+    def timeoutConnection(self):
+        self.timedOut = True
+        self.transport.loseConnection()
+
     def connectionLost(self, reason):
+        if self.timeout > 0:
+            self.setTimeout(None)
+
+        if self.timedOut:
+            reason = error.TimeoutError()
+            self.timedOut = False
+
         d = []
         if self.waiting is not None:
             d.append(self.waiting)
             self.waiting = None
         if self._blockedQueue is not None:
             d.extend([deferred for (deferred, f, a) in self._blockedQueue])
             self._blockedQueue = None
         for w in d:
             w.errback(reason)
 
     def lineReceived(self, line):
+        if self.timeout > 0:
+            self.resetTimeout()
+
         state = self.state
         self.state = None
         state = getattr(self, 'state_' + state)(line) or state
         if self.state is None:
             self.state = state
 
     def lineLengthExceeded(self, buffer):
         # XXX - We need to be smarter about this
@@ -202,23 +264,26 @@
 
     # POP3 Client state logic - don't touch this.
     def state_WELCOME(self, line):
         # WELCOME is the first state.  The server sends one line of text
         # greeting us, possibly with an APOP challenge.  Transition the
         # state to WAITING.
         code, status = _codeStatusSplit(line)
         if code != OK:
+            #XXX: Should raise some kind of error here
             self.transport.loseConnection()
         else:
             m = self.challengeMagicRe.search(status)
+
             if m is not None:
-                self.serverGreeting(m.group(1))
-            else:
-                self.serverGreeting(None)
+                self.serverChallenge = m.group(1)
+
+            self.serverGreeting(self.serverChallenge)
+
         return 'WAITING'
 
     def state_WAITING(self, line):
         # The server isn't supposed to send us anything in this state.
         log.msg("Illegal line from server: " + repr(line))
 
     def state_SHORT(self, line):
         # This is the state we are in when waiting for a single
@@ -264,46 +329,153 @@
             return 'WAITING'
         else:
             if self.xform is not None:
                 self.consumer(self.xform(line))
             else:
                 self.consumer(line)
             return 'LONG'
 
-    # Callbacks - override these
     def serverGreeting(self, challenge):
-        self.serverChallenge = challenge
+        """Called when the server has sent us a greeting.
+
+           @type challenge: C{Str} (None if no challenge returned in the Server Greeting)
+           @param challenge: A POP3 server which implements the APOP command will
+                             include a timestamp challenge in its banner greeting (RFC 1939).
+                             .
+        """
+
+    def startTLS(self, contextFactory=None):
+        """
+        Initiates a 'STLS' request and negotiates the TLS / SSL
+        Handshake.
+
+        @param contextFactory: The TLS / SSL Context Factory to
+        leverage.  If the contextFactory is None the POP3Client will
+        either use the current TLS / SSL Context Factory or attempt to
+        create a new one.
+
+        @type contextFactory: C{ssl.ClientContextFactory}
+
+        @return: A Deferred which fires when the transport has been
+        secured according to the given contextFactory, or which fails
+        if the transport cannot be secured.
+        """
+
+        if self._capCache is None:
+            d = self.capabilities()
+
+        else:
+            d = defer.succeed(self._capCache)
+
+        d.addCallback(self._startTLS, contextFactory)
+        return d
+
+
+    def _startTLS(self, caps, contextFactory):
+        assert not self.startedTLS, "Client and Server are currently communicating via TLS"
+
+        if contextFactory is None:
+            contextFactory = self._getContextFactory()
+
+        if contextFactory is None:
+            return defer.fail(TLSError(
+                "POP3Client requires a TLS context to "
+                "initiate the STARTTLS handshake"))
+
+        if 'STLS' not in caps:
+            return defer.fail(TLSNotSupportedError(
+                "Server does not support secure communication "
+                "via TLS / SSL"))
+
+        tls = interfaces.ITLSTransport(self.transport, None)
+
+        if tls is None:
+            return defer.fail(TLSError(
+                "POP3Client transport does not implement "
+                "interfaces.ITLSTransport"))
+
+        d = self.sendShort('STLS', None)
+        d.addCallback(self._startedTLS, contextFactory)
+        d.addCallback(lambda _: self.capabilities())
+        return d
+
+    def _startedTLS(self, result, context):
+        self.transport.startTLS(context)
+        self._capCache = None
+        self.startedTLS = True
+        self.context = context
+        return result
+
+    def _getContextFactory(self):
+        if self.context is not None:
+            return self.context
+        try:
+            from twisted.internet import ssl
+        except ImportError:
+            return None
+        else:
+            context = ssl.ClientContextFactory()
+            context.method = ssl.SSL.TLSv1_METHOD
+            return context
 
     # External hooks - call these (most of 'em anyway)
     def login(self, username, password):
         """Log into the server.
 
         If APOP is available it will be used.  Otherwise, if
-        the transport being used is SSL, plaintext login will
-        proceed.  Otherwise, if the instance attribute
-        allowInsecureLogin is set to True, insecure plaintext
-        login will proceed.  Otherwise,
+        TLS is available a 'STLS' session will be started and
+        plaintext login will proceed.  Otherwise, if the
+        instance attribute allowInsecureLogin is set to True,
+        insecure plaintext login will proceed.  Otherwise,
         InsecureAuthenticationDisallowed will be raised
         (asynchronously).
 
         @param username: The username with which to log in.
         @param password: The password with which to log in.
 
         @rtype: C{Deferred}
         @return: A deferred which fires when login has
         completed.
         """
+        if self._capCache is None:
+            d = self.capabilities()
+
+        else:
+            d = defer.succeed(self._capCache)
+
+        d.addCallback(self._login, username, password)
+        return d
+
+    def _login(self, caps, username, password):
         if self.serverChallenge is not None:
             return self._apop(username, password, self.serverChallenge)
-        elif self.transport.getHost()[0] == 'SSL' or self.allowInsecureLogin:
+
+        tryTLS = 'STLS' in caps
+
+        #If our transport supports switching to TLS, we might want to try to switch to TLS.
+        tlsableTransport = interfaces.ITLSTransport(self.transport, default=None) is not None
+
+        # If our transport is not already using TLS, we might want to try to switch to TLS.
+        nontlsTransport = interfaces.ISSLTransport(self.transport, default=None) is None
+
+        if not self.startedTLS and tryTLS and tlsableTransport and nontlsTransport:
+            d = self.startTLS()
+
+            d.addCallback(self._loginTLS, username, password)
+            return d
+
+        elif self.startedTLS or self.allowInsecureLogin:
             return self._plaintext(username, password)
         else:
             return defer.fail(InsecureAuthenticationDisallowed())
 
+    def _loginTLS(self, res, username, password):
+        return self._plaintext(username, password)
+
     def _plaintext(self, username, password):
         # Internal helper.  Send a username/password pair, returning a Deferred
         # that fires when both have succeeded or fails when the server rejects
         # either.
         return self.user(username).addCallback(lambda r: self.password(password))
 
     def _apop(self, username, password, challenge):
         # Internal helper.  Computes and sends an APOP response.  Returns
@@ -374,39 +546,79 @@
         # and return a Deferred that fires with that list when it is
         # complete.
         if consumer is None:
             L = []
             consumer = L.append
             return self.sendLong(cmd, args, consumer, xform).addCallback(lambda r: L)
         return self.sendLong(cmd, args, consumer, xform)
 
-    def capabilities(self, consumer=None):
+    def capabilities(self, useCache=1):
         """Retrieve the capabilities supported by this server.
-
-        If L{consumer} is not None, it will be called with each
-        capability string as it is received.  Otherwise, the
-        returned Deferred will be fired with a list of all the
-        capability strings when they have all been received.
         """
-        return self._consumeOrAppend('CAPA', None, consumer, None)
+        if useCache and self._capCache is not None:
+            return defer.succeed(self._capCache)
+
+        #Reset the Capabilities Cache
+        self._capCache = {}
+
+        d = self._consumeOrAppend('CAPA', None, self._capsConsumer, None)
+        d.addCallback(self._cbCapabilities)
+        return d
+
+    def _cbCapabilities(self, result):
+        """Returns the Capabilities to the caller"""
+        return self._capCache
+
+
+    def _capsConsumer(self, line):
+        tmp = line.split()
+
+        size = len(tmp)
+
+        if size == 0:
+            return
+
+        if size == 1:
+            self._capCache[tmp[0]] = None
+        else:
+            self._capCache[tmp[0]] = tmp[1:]
+
+    def noop(self):
+        return self.sendShort("NOOP", None)
+
+    def rset(self):
+        return self.sendShort("RSET", None)
 
     def retrieve(self, index, consumer=None, lines=None):
         """Retrieve a message from the server.
 
         If L{consumer} is not None, it will be called with
         each line of the message as it is received.  Otherwise,
         the returned Deferred will be fired with a list of all
         the lines when the message has been completely received.
         """
         idx = str(index + 1)
         if lines is None:
             return self._consumeOrAppend('RETR', idx, consumer, _dotUnquoter)
+
+        if 'TOP' not in self._capCache:
+            return defer.fail(OptionNotSupportedError("POP3Server does not support 'TOP'"))
+
         return self._consumeOrAppend('TOP', '%s %d' % (idx, lines), consumer, _dotUnquoter)
 
+
+    def stat(self):
+        """Issues a 'STAT' request which is allowed in the TRANSACTION state (RFC 1939).
+           The returned Deferred will be fired with a tuple containing the
+           number or messages in the maildrop and the size of the
+           maildrop in octets.
+        """
+        return self.sendShort('STAT', None).addCallback(_statXform)
+
     def listSize(self, consumer=None):
         """Retrieve a list of the size of all messages on the server.
 
         If L{consumer} is not None, it will be called with two-tuples
         of message index number and message size as they are received.
         Otherwise, a Deferred which will fire with a list of B{only}
         message sizes will be returned.  For messages which have been
         deleted, None will be used in place of the message size.
@@ -417,22 +629,26 @@
         """Retrieve a list of the UIDs of all messages on the server.
 
         If L{consumer} is not None, it will be called with two-tuples
         of message index number and message UID as they are received.
         Otherwise, a Deferred which will fire with of list of B{only}
         message UIDs will be returned.  For messages which have been
         deleted, None will be used in place of the message UID.
         """
+
+        if 'UIDL' not in self._capCache:
+            return defer.fail(OptionNotSupportedError("POP3Server does not support 'UIDL'"))
+
         return self._consumeOrSetItem('UIDL', None, consumer, _uidXform)
 
     def quit(self):
         """Disconnect from the server.
         """
         return self.sendShort('QUIT', None)
 
 __all__ = [
     # Exceptions
     'InsecureAuthenticationDisallowed', 'LineTooLong', 'POP3ClientError',
-    'ServerErrorResponse',
+    'ServerErrorResponse', 'TLSError', 'TLSNotSupportedError', 'OptionNotSupported',
 
     # Protocol classes
     'POP3Client']

--- Twisted-r13651/twisted/mail/imap4.py	Sat Apr 23 22:44:49 2005
+++ Twisted-r13651-patched/twisted/mail/imap4.py	Thu May  5 17:23:36 2005
@@ -2312,8 +2312,19 @@
         @return: A Deferred which fires when the transport has been
         secured according to the given contextFactory, or which fails
         if the transport cannot be secured.
         """
+
+        if self._capCache is None:
+            d = self.getCapabilities()
+        else:
+            d = defer.succeed(self._capCache)
+
+        d.addCallback(self.__startTLS, contextFactory)
+        return d
+
+    def __startTLS(self, capabilities, contextFactory):
+
         assert not self.startedTLS, "Client and Server are currently communicating via TLS"
 
         if contextFactory is None:
             contextFactory = self._getContextFactory()
@@ -2322,9 +2333,9 @@
             return defer.fail(IMAP4Exception(
                 "IMAP4Client requires a TLS context to "
                 "initiate the STARTTLS handshake"))
 
-        if 'STARTTLS' not in self._capCache:
+        if 'STARTTLS' not in capabilities:
             return defer.fail(IMAP4Exception(
                 "Server does not support secure communication "
                 "via TLS / SSL"))
 
@@ -2435,9 +2446,9 @@
 
     def serverGreeting(self, caps):
         """Called when the server has sent us a greeting.
 
-        @type caps: C{dict}
+        @type caps: C{dict} (None if no Capabilities returned in the Server Greeting)
         @param caps: Capabilities the server advertised in its greeting.
         """
 
     def _getContextFactory(self):
@@ -2480,8 +2491,9 @@
     def _startedTLS(self, result, context):
         self.transport.startTLS(context)
         self._capCache = None
         self.startedTLS = True
+        self.context = context
         return result
 
     def __ebLoginCaps(self, failure):
         log.err(failure)
@@ -4572,9 +4584,9 @@
         """
 
 class IMessageFile(components.Interface):
     """Optional message interface for representing messages as files.
-    
+
     If provided by message objects, this interface will be used instead
     the more complex MIME-based interface.
     """
     def open(self):
@@ -5384,9 +5396,9 @@
 
 __all__ = [
     # Protocol classes
     'IMAP4Server', 'IMAP4Client',
-    
+
     # Interfaces
     'IMailboxListener', 'IClientAuthentication', 'IAccount', 'IMailbox',
     'INamespacePresenter', 'ICloseableMailbox', 'IMailboxInfo',
     'IMessage', 'IMessageCopier', 'IMessageFile', 'ISearchableMailbox',
@@ -5404,11 +5416,11 @@
     'PLAINCredentials', 'LOGINCredentials',
 
     # Simple query interface
     'Query', 'Not', 'Or', 
-    
+
     # Miscellaneous
     'MemoryAccount',
     'statusRequestHelper',
-    
-    
+
+
 ]
