HardHat README

Build Instructions
------------------

- Make sure you have Python installed on your system.
- set OSAFROOT to a directory where you would like builds to take place
- cd $OSAFROOT
- cvs checkout chandler-source

* Building entire release tree *
python hardhat/hardhat -eB Chandler

* Running unit tests *
python hardhat/hardhat -t Chandler

* Cleaning entire release tree *
python hardhat/hardhat -C Chandler

* Building entire debug tree *
python hardhat/hardhat -edB Chandler

* Running unit tests *
python hardhat/hardhat -dt Chandler

* Cleaning entire debug tree *
python hardhat/hardhat -dC Chandler

* Executing release *
python hardhat/hardhat -x Chandler

* Executing debug *
python hardhat/hardhat -dx Chandler



HardHat commandline options
---------------------------

-a MODULE   remove runtime directory for MODULE
-b MODULE   build module MODULE
-B MODULE   build MODULE and its dependencies
-c MODULE   clean module MODULE
-C MODULE   clean MODULE and its dependencies
-d          use debug version
-D          create a distribution
-e          show environment variables in build.log
-h          display this help
-i          inspect system (not implemented)
-n          non-interactive (won't prompt during scrubbing)
-r          use release version (this is the default)
-R DIR      directory to use for OSAFROOT (overrides env var)
-s          scrub MODULE (remove all local files not in CVS)
-S          scrub MODULE and its dependencies
-t MODULE   test module MODULE
-x MODULE   execute MODULE

If you want to run an aribtrary python script via the release or debug
version of python (as opposed to your system's installed python), do the
following:

python hardhat/hardhat path/to/myscript.py

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Q: What is HardHat?
A: HardHat is a Python script which builds a collection of subsystems in
   a modular fashion.  Each subsystem directory contains a python file
   implementing build, clean, and execution methods.  HardHat sets up 
   the environment appropriately and calls each of these methods as 
   needed.  This approach allows each subsystem to use whatever particular
   build technology is required (make, distutils, VisualStudio solution),
   and provides a uniform interface for invoking them.  Output from all the
   subsystem builds is captured to a file named hardhat.log.
   Since HardHat is itself a Python module wrapped by a Python command-line
   script, the module could be embedded in another application such as an 
   automated build system, or perhaps a GUI.
   

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
