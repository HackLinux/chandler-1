#!bin/env python

"""The MenuBar is associated with each ChandlerWindow.  It's content is
static except for the second to last menu.  That menu changes according
to the current view and it's contents are generated by querying the 
package associated with the current view."""

__author__ = "Jed Burgess"
__version__ = "$Revision$"
__date__ = "$Date$"
__copyright__ = "Copyright (c) 2002 Open Source Applications Foundation"
__license__ = "Python"


from wxPython.wx import *
from wxPython.xrc import *

class MenuBar:
    def __init__(self, parent, components):
        self.parent = parent
        self.resources = wxXmlResource ("application/resources/menu.xrc")
        self.menuBar = self.resources.LoadMenuBar("MainMenuBar")
        self.parent.SetMenuBar(self.menuBar)
        
        self.AddComponentsMenus(components)
        self.AddComponentViewMenus(components)
        self.SetDefaults()
        self.CreateEvents()
        
    def SetDefaults(self):            
        self.showLocationBar = true
        self.menuBar.Check(self.menuBar.FindMenuItem("View", "Location Bar"), self.showLocationBar)
        self.showActionsBar = true
        self.menuBar.Check(self.menuBar.FindMenuItem("View", "Actions Bar"), self.showActionsBar)        
        self.showStatusBar = true
        self.menuBar.Check(self.menuBar.FindMenuItem("View", "Status Bar"), self.showStatusBar)                
        self.showSideBar = true
        self.menuBar.Check(self.menuBar.FindMenuItem("View", "Side Bar"), self.showSideBar)
       
        self.tableViewID = self.menuBar.FindMenuItem("View", "View as Table")
        self.iconViewID = self.menuBar.FindMenuItem("View", "View as Icons")
        self.useTableView = true
        self.menuBar.Check(self.tableViewID, self.useTableView)
        
        self.doAutoresize = true
        self.autoresizeID = self.menuBar.FindMenuItem("View", "Auto-resize columns")
        self.menuBar.Check(self.autoresizeID, self.doAutoresize)
          
    def CreateEvents(self):
        # File menu
        EVT_MENU(self.parent, XRCID ("menu_new_viewer"), self.OnNewViewer)
        EVT_MENU(self.parent, XRCID ("menu_import_spool"), self.OnImportSpool)
        EVT_MENU(self.parent, XRCID ("menu_close"), self.OnClose)
        EVT_MENU(self.parent, XRCID ("menu_quit"), self.OnQuit)

        #Edit menu
        EVT_MENU(self.parent, XRCID ("menu_undo"), self.OnUndo)
        EVT_MENU(self.parent, XRCID ("menu_cut"), self.OnCut)
        EVT_MENU(self.parent, XRCID ("menu_copy"), self.OnCopy)
        EVT_MENU(self.parent, XRCID ("menu_paste"), self.OnPaste)
        EVT_MENU(self.parent, XRCID ("menu_prefs"), self.OnPrefs)
        EVT_MENU(self.parent, XRCID ("menu_setup"), self.OnSetup)

        # View menu
        EVT_MENU(self.parent, XRCID ("menu_show_location"), self.OnShowLocationBar)
        EVT_MENU(self.parent, XRCID ("menu_show_actions"), self.OnShowActionsBar)
        EVT_MENU(self.parent, XRCID ("menu_show_tabs"), self.OnShowTabs)
        EVT_MENU(self.parent, XRCID ("menu_show_sidebar"), self.OnShowSidebar)
        EVT_MENU(self.parent, XRCID ("menu_show_status"), self.OnShowStatus)
        EVT_MENU(self.parent, XRCID ("menu_display_index"), self.OnDisplayIndex)
        EVT_MENU(self.parent, XRCID ("menu_display_contact"), self.OnDisplayContact)
        EVT_MENU(self.parent, XRCID ("menu_table_view"), self.OnTableView)
        EVT_MENU(self.parent, XRCID ("menu_icon_view"), self.OnIconView)
        EVT_MENU(self.parent, XRCID ("menu_autoresize"), self.OnAutoresize)
        
        # Help menu
        EVT_MENU(self.parent, wxID_ABOUT, self.OnAbout)

    def AddComponentsMenus(self, components):
        self.componentsMenus = {}
        if len(components) < 1: return
        for component in components:
            self.componentsMenus[component.GetName()] = component
        defaultComponent = components[0].GetName() #hack
        self.menuBar.Insert(3, self.componentsMenus[defaultComponent].GetMenu(), defaultComponent)

    def AddComponentViewMenus(self, components):
        if len(components) < 1: return
        viewMenu = self.menuBar.GetMenu(self.menuBar.FindMenu("View"))
        viewMenu.AppendSeparator()
        for component in components:
            viewMenu.AppendMenu(99, component.GetName() + ' Views', component.GetViewMenu())
        
    def SelectView(self, name):
        self.menuBar.Replace(3, self.componentsMenus[name].GetMenu(), name)
                
    # File menu methods
    def OnNewViewer(self, event):
        pass
#        self.parent.NewViewer()

    def OnImportSpool(self, event):
        pass
        
    def OnClose(self, event):
        self.parent.Close(true)

    def OnQuit(self, event):
        self.parent.Quit()

    # Edit menu methods
    def OnUndo(self, event):
        pass
            
    def OnCut(self, event):
        pass
        
    def OnCopy(self, event):
        pass
    
    def OnPaste(self, event):
        pass
        
    def OnPrefs(self, event):
        dialog = self.resources.LoadDialog(self.parent, "PreferencesDialog")
        result = dialog.ShowModal()
        dialog.Destroy()
        
    def OnSetup(self, event):
        dialog = self.resources.LoadDialog(self.parent, "MailSetupDialog")
        result = dialog.ShowModal()
        dialog.Destroy()
        
    # View menu methods
    def OnShowLocationBar(self, event):
        self.showLocationBar = not self.showLocationBar
        self.parent.ShowLocationBar(self.showLocationBar)
        
    def OnShowActionsBar(self, event):
        self.showActionsBar = not self.showActionsBar
        self.parent.ShowActionsBar(self.showActionsBar)
        
    def OnShowTabs(self, event):
        pass
        
    def OnShowSidebar(self, event):
        self.showSideBar = not self.showSideBar
        self.parent.ShowSideBar(self.showSideBar)
        
    def OnShowStatus(self, event):
        self.showStatusBar = not self.showStatusBar
        self.parent.ShowStatus(self.showStatusBar)
        
    def OnDisplayIndex(self, event):
        pass
        
    def OnDisplayContact(self, event):
        pass
        
    def OnTableView(self, event):
        self.useTableView = true
        self.menuBar.Check(self.tableViewID, self.useTableView)
        self.menuBar.Check(self.iconViewID, not self.useTableView)
        
    def OnIconView(self, event):
        self.useTableView = false
        self.menuBar.Check(self.tableViewID, self.useTableView)
        self.menuBar.Check(self.iconViewID, not self.useTableView)

    def OnAutoresize(self, event):
        self.doAutoresize = not self.doAutoresize
                
    # Help menu methods
    def OnAbout(self, event):
        dialog = self.resources.LoadDialog(self.parent, "AboutDialog")
        result = dialog.ShowModal()
        dialog.Destroy()