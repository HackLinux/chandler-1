#!bin/env python

"""The MenuBar is associated with each ChandlerWindow.  It's content is
static except for the second to last menu.  That menu changes according
to the current view and it's contents are generated by querying the 
package associated with the current view."""

__author__ = "Jed Burgess"
__version__ = "$Revision$"
__date__ = "$Date$"
__copyright__ = "Copyright (c) 2002 Open Source Applications Foundation"
__license__ = "OSAF"


from wxPython.wx import *
from wxPython.xrc import *

VIEWS_MENU_ID = 3000
COMPONENT_MENU_POS = 3
RESOURCE_FILE_LOCATION = "application/resources/menu.xrc"
MENU_BAR_NAME = "MainMenuBar"

class MenuBar:
    def __init__(self, parent, components):
        """Sets up the MenuBar.  The majority of the menubar's information
        is stored in a resource file which this reads to load.  It also
        gets some of its menus from the individual components.  __init__
        queries each of the available to components to get the necessary
        information.  It also sets up default values for menu items (i.e
        whether or not they are checked/greyed/etc."""
        self.parent = parent
        self.resources = wxXmlResource (RESOURCE_FILE_LOCATION)
        self.menuBar = self.resources.LoadMenuBar(MENU_BAR_NAME)
        self.parent.SetMenuBar(self.menuBar)
        
        self.__AddComponentsMenus(components)
        self.__AddComponentViewMenus(components)
        self.__SetDefaults()
        self.__CreateEvents()
        
    def __SetDefaults(self):
        """Initialize the state of the menus.  This includes setting whether
        or not certain items are checked, visible, etc."""
        self.showLocationBar = true
        self.menuBar.Check(self.menuBar.FindMenuItem("View", "Location Bar"),
                           self.showLocationBar)
        self.showActionsBar = true
        self.menuBar.Check(self.menuBar.FindMenuItem("View", "Actions Bar"), 
                           self.showActionsBar)        
        self.showStatusBar = true
        self.menuBar.Check(self.menuBar.FindMenuItem("View", "Status Bar"), 
                           self.showStatusBar)                
        self.showSideBar = true
        self.menuBar.Check(self.menuBar.FindMenuItem("View", "Side Bar"), 
                           self.showSideBar)
       
        self.tableViewID = self.menuBar.FindMenuItem("View", "View as Table")
        self.iconViewID = self.menuBar.FindMenuItem("View", "View as Icons")
        self.useTableView = true
        self.menuBar.Check(self.tableViewID, self.useTableView)
        
        self.doAutoresize = true
        self.autoresizeID = self.menuBar.FindMenuItem("View", 
                                                      "Auto-resize columns")
        self.menuBar.Check(self.autoresizeID, self.doAutoresize)
          
    def __CreateEvents(self):
        """Creates all of the menu events for menu items that are not specific
        to a single component."""
        # File menu
        EVT_MENU(self.parent, XRCID ("menu_new_viewer"), self.OnNewViewer)
        EVT_MENU(self.parent, XRCID ("menu_import_spool"), self.OnImportSpool)
        EVT_MENU(self.parent, XRCID ("menu_close"), self.OnClose)
        EVT_MENU(self.parent, XRCID ("menu_quit"), self.OnQuit)

        #Edit menu
        EVT_MENU(self.parent, XRCID ("menu_undo"), self.OnUndo)
        EVT_MENU(self.parent, XRCID ("menu_cut"), self.OnCut)
        EVT_MENU(self.parent, XRCID ("menu_copy"), self.OnCopy)
        EVT_MENU(self.parent, XRCID ("menu_paste"), self.OnPaste)
        EVT_MENU(self.parent, XRCID ("menu_prefs"), self.OnPrefs)
        EVT_MENU(self.parent, XRCID ("menu_setup"), self.OnSetup)

        # View menu
        EVT_MENU(self.parent, XRCID ("menu_show_location"), 
                 self.OnShowLocationBar)
        EVT_MENU(self.parent, XRCID ("menu_show_actions"), 
                 self.OnShowActionsBar)
        EVT_MENU(self.parent, XRCID ("menu_show_tabs"), self.OnShowTabs)
        EVT_MENU(self.parent, XRCID ("menu_show_sidebar"), 
                 self.OnShowSidebar)
        EVT_MENU(self.parent, XRCID ("menu_show_status"), self.OnShowStatus)
        EVT_MENU(self.parent, XRCID ("menu_display_index"), 
                 self.OnDisplayIndex)
        EVT_MENU(self.parent, XRCID ("menu_display_contact"), 
                 self.OnDisplayContact)
        EVT_MENU(self.parent, XRCID ("menu_table_view"), self.OnTableView)
        EVT_MENU(self.parent, XRCID ("menu_icon_view"), self.OnIconView)
        EVT_MENU(self.parent, XRCID ("menu_autoresize"), self.OnAutoresize)
        
        # Help menu
        EVT_MENU(self.parent, wxID_ABOUT, self.OnAbout)

    def __AddComponentsMenus(self, components):
        """Adds the menus specific to each component to the menubar's list
        of component menus.  Only the menu specific to the current view is 
        displayed.  As the current view switches, the menus will be switched
        accordingly."""
        self.componentsMenus = {}
        if len(components) > 0:
            for component in components:
                self.componentsMenus[component.GetComponentName()] = component
            defaultComponent = components[0].GetComponentName()
            self.menuBar.Insert(COMPONENT_MENU_POS, 
                  self.componentsMenus[defaultComponent].GetComponentMenu(),
                  defaultComponent)

    def __AddComponentViewMenus(self, components):
        """Creates the view menus that allow the user to navigate among the
        different components and their views.  The specifics of each 
        component's view menu is generated by the component's 
        ComponentLoader."""
        if len(components) > 0:
            viewMenu = self.menuBar.GetMenu(self.menuBar.FindMenu("View"))
            viewMenu.AppendSeparator()
            for component in components:
                viewMenu.AppendMenu(VIEWS_MENU_ID, 
                                    component.GetComponentName() + ' Views', 
                                    component.GetViewsMenu())
        
    def SelectComponent(self, name):
        """Called when the active component changes.  This method causes the 
        menu which is specific to the component to change."""
        newMenu = self.componentsMenus[name].GetComponentMenu()
        if self.menuBar.GetMenu(COMPONENT_MENU_POS) != newMenu:
            self.menuBar.Replace(COMPONENT_MENU_POS, newMenu, name)
                
    # File menu methods
    def OnNewViewer(self, event):
        self.parent.NewViewer()

    def OnImportSpool(self, event):
        pass
        
    def OnClose(self, event):
        self.parent.Close(true)

    def OnQuit(self, event):
        self.parent.Quit()

    # Edit menu methods
    def OnUndo(self, event):
        pass
            
    def OnCut(self, event):
        pass
        
    def OnCopy(self, event):
        pass
    
    def OnPaste(self, event):
        pass
        
    def OnPrefs(self, event):
        dialog = self.resources.LoadDialog(self.parent, "PreferencesDialog")
        result = dialog.ShowModal()
        dialog.Destroy()
        
    def OnSetup(self, event):
        dialog = self.resources.LoadDialog(self.parent, "MailSetupDialog")
        result = dialog.ShowModal()
        dialog.Destroy()
        
    # View menu methods
    def OnShowLocationBar(self, event):
        self.showLocationBar = not self.showLocationBar
        self.parent.ShowLocationBar(self.showLocationBar)
        
    def OnShowActionsBar(self, event):
        self.showActionsBar = not self.showActionsBar
        self.parent.ShowActionsBar(self.showActionsBar)
        
    def OnShowTabs(self, event):
        pass
        
    def OnShowSidebar(self, event):
        self.showSideBar = not self.showSideBar
        self.parent.ShowSideBar(self.showSideBar)
        
    def OnShowStatus(self, event):
        self.showStatusBar = not self.showStatusBar
        self.parent.ShowStatus(self.showStatusBar)
        
    def OnDisplayIndex(self, event):
        pass
        
    def OnDisplayContact(self, event):
        pass
        
    def OnTableView(self, event):
        self.useTableView = true
        self.menuBar.Check(self.tableViewID, self.useTableView)
        self.menuBar.Check(self.iconViewID, not self.useTableView)
        
    def OnIconView(self, event):
        self.useTableView = false
        self.menuBar.Check(self.tableViewID, self.useTableView)
        self.menuBar.Check(self.iconViewID, not self.useTableView)

    def OnAutoresize(self, event):
        self.doAutoresize = not self.doAutoresize
                
    # Help menu methods
    def OnAbout(self, event):
        dialog = self.resources.LoadDialog(self.parent, "AboutDialog")
        result = dialog.ShowModal()
        dialog.Destroy()