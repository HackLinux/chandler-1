=========================
Schema Definition Support
=========================

.. contents:: **Table of Contents**

    >>> from application import schema
    >>> from repository.persistence.RepositoryView import NullRepositoryView


------------
Introduction
------------

TODO

------------
Role Objects
------------

The ``One``, ``Many``, ``Sequence``, and ``Mapping`` classes are all used to
define roles.  They are all essentially identical except for their
``cardinality`` attribute, which controls how the repository will store the
attribute's value::

    >>> schema.One.cardinality
    'single'
    >>> schema.Many.cardinality
    'set'
    >>> schema.Sequence.cardinality
    'list'
    >>> schema.Mapping.cardinality
    'dict'


The ``Role`` Base Type
======================

The base class for roles is ``schema.Role``.  It provides most of the
default behavior of roles, so rather than duplicate examples for each
individual role type, we'll examine the default behaviors here.

All role objects have at least the following attributes and methods:

``name`` (read-only)
    The name under which this role was first defined in an entity class or
    relationship, or ``None`` if the role has not been registered with a
    class yet::

        >>> role = schema.Role()
        >>> print role.name
        None
        >>> class anEntity(schema.Item):
        ...     aRole = role
        >>> role.name
        'aRole'


``owner`` (read-only)
    The entity or relationship class in which the role was defined, or ``None``
    if the role has not been registered with a class yet::

        >>> role = schema.Role()
        >>> print role.owner
        None
        >>> class anEntity(schema.Item):
        ...     aRole = role
        >>> role.owner
        <class 'anEntity'>

    If a role's owner is an ``Item`` class, then setting ``aRole.inverse`` will
    invoke ``aRole.inverse.addType(aRole.owner)``, so that the inverse role
    will accept instances of the first role's owning type.  This allows you
    to easily define bidirectional links without "forward references"; just
    leave off the `type` argument in both role definitions, and specify an
    `inverse` argument for the second::

        >>> class anotherEntity(schema.Item):
        ...     otherRole = schema.Role(inverse=anEntity.aRole)
        >>> anotherEntity.otherRole.type
        <class 'anEntity'>
        >>> anEntity.aRole.type
        <class 'anotherEntity'>

    As you can see, this ensures that both roles can accept the owning type of
    the other role.  It also works for setting up self-recursive roles within a
    single type::

        >>> class Kind(schema.Item):
        ...     name = schema.One(schema.String)
        ...     subkinds = schema.Many()
        ...     superkinds = schema.Many(inverse=subkinds)
        ...     def __repr__(self):
        ...         return getattr(self,'name',object.__repr__(self))

        >>> Kind.subkinds.type
        <class 'Kind'>
        >>> Kind.superkinds.type
        <class 'Kind'>

``displayName``, ``description``, and ``doc``
    The name and description of this role, if any.  They will be used to
    collectively form a ``__doc__`` string, so that ``help()`` is informative
    for Item classes::

        >>> Kind.subkinds.doc = "Sub-kinds of this kind"
        >>> Kind.superkinds.doc = "Super-kinds of this kind"
        >>> Kind.name.doc = "This kind's name"
        >>> Kind.name.displayName = "Kind Name"

        >>> help(Kind)  # doctest: +NORMALIZE_WHITESPACE
        Help on class Kind ...
        ...
        class Kind(application.schema.Item)
         | ...
         |  Data and other attributes defined here:
         |
         |  name = <Role name of <class 'Kind'>>
         |      Kind Name -- One(String)
         |
         |      This kind's name
         |
         |  subkinds = <Role subkinds of <class 'Kind'>>
         |      Many(Kind)
         |
         |      Sub-kinds of this kind
         |
         |  superkinds = <Role superkinds of <class 'Kind'>>
         |      Many(Kind)
         |
         |      Super-kinds of this kind
         |  ...

    Note: ``doc`` is a shortcut for ``description``; there is no difference
    between the two attributes::

        >>> Kind.name.doc is Kind.name.description
        True

    The ``doc`` and ``description`` are always strings, even if empty::

        >>> schema.Role().description
        ''

``inverse``
    The role object that represents the "other side" of the relationship, or
    ``None`` if not yet set.  Setting a role's inverse automatically attempts
    to set the reverse role, so that each role's ``inverse`` attribute points
    to the other.  Thus, you do not have to set both roles' ``inverse``
    attributes in order to link them together.

    ``inverse`` can be set via keyword argument to the role class'
    constructor::

        >>> role1 = schema.Role()
        >>> print role1.inverse
        None
        >>> role2 = schema.Role(inverse=role1)
        >>> role2.inverse is role1
        True
        >>> role1.inverse is role2
        True

    Or by setting the ``inverse`` attribute after construction::

        >>> role1 = schema.Role()
        >>> role2 = schema.Role()
        >>> role2.inverse = role1
        >>> role2.inverse is role1
        True
        >>> role1.inverse is role2
        True

    Once set, it cannot be changed, unless it is to the same role::

        >>> role2.inverse = schema.Role()
        Traceback (most recent call last):
        ...
        TypeError: Role objects are immutable; can't change 'inverse' ... once set

        >>> role2.inverse is role1      # no change took place
        True

    And trying to insert a new role into an existing pair also fails::

        >>> role3 = schema.Role()
        >>> print role3.inverse
        None
        >>> role3.inverse = role2
        Traceback (most recent call last):
        ...
        TypeError: Role objects are immutable; can't change 'inverse' ... once set

        >>> print role3.inverse         # no change took place
        None

    Inverse roles can also use forward reference strings; these can be either
    a fully-qualified name to import, or a simple undotted string that is
    the name of an attribute on the role's type::

        >>> class File(schema.Item):
        ...     folder = schema.One("Folder", inverse="contents")
        >>> class Folder(File):
        ...     contents = schema.Many(File, inverse=File.folder)

    Notice that the second attribute uses normal references instead of forward
    references.  This ensures that the forward references are resolved::

        >>> File.folder.type
        <class 'Folder'>

        >>> File.folder.inverse
        <Role contents of <class 'Folder'>>

``type``
    The ``type`` of a role can be either a ``schema.Item`` subclass, a
    ``schema.TypeReference`` to a specific repository value type, or a string
    (which is automatically converted to a ``schema.ForwardReference``).  The
    ``schema`` module supplies various pre-configured ``TypeReference``
    objects for your convenience::

        >>> schema.String
        TypeReference('//Schema/Core/String')

        >>> myType = schema.TypeReference('//Schema/Core/DateTime')

        >>> print schema.Role(myType).__doc__
        Role(DateTime)

    Note that you cannot use arbitrary Python types or classes; you must either
    supply a ``schema.TypeReference``, a subclass of ``schema.Item``, or a
    string representing a forward reference::

        >>> schema.Role(str)
        Traceback (most recent call last):
        ...
        TypeError: ('Attribute type must be Item/Enumeration class or TypeReference', ...)

    And type references must be to types defined by the repository's core
    schema::

        >>> schema.TypeReference('//no/such/type')
        Traceback (most recent call last):
        ...
        NameError: Type '//no/such/type' not found in the core schema

    Types expressed as a string are automatically converted to
    ``ForwardReference`` objects::

        >>> testRole = schema.Role("application.schema.Item")
        >>> testRole.type
        ForwardReference('application.schema.Item',<...Role object...>)

    Forward references compare equal to the type they reference::

        >>> testRole.type == schema.Item
        True
        >>> testRole.type != schema.Item
        False

Aspect Attributes
    Role objects support setting all of the aspects of a repository
    ``Attribute``, including ``required``, ``persisted``, ``indexed``,
    ``cardinality``, ``defaultValue``, ``initialValue``, ``inheritFrom``,
    ``redirectTo``, ``otherName``, ``companion``, ``deletePolicy``,
    ``copyPolicy``, ``countPolicy``, ``type``, ``superAttribute``,
    ``displayName``, and ``description``.  You can supply any of these as
    keyword arguments to a Role constructor (such as ``schema.One``,
    ``schema.Many``, etc.), in order to set the corresponding value for the
    attribute.  Unspecified aspects will take on their normal default values,
    except for ``otherName``, which is set to ``inverse.name`` by default, if
    the attribute has an inverse.


To avoid silent definition errors, ``Role`` classes will not allow setting
attributes that are not defined by their class::

    >>> r = schema.Role(foo="bar")
    Traceback (most recent call last):
    ...
    TypeError: 'foo' is not a public attribute of 'Role' objects

And, to avoid unintentional alterations, Role attributes can be set only once::

    >>> r = schema.Role(doc="x")
    >>> r.doc = "testing"
    Traceback (most recent call last):
      ...
    TypeError: Role objects are immutable; can't change 'doc' ... once set


---------------
Item Subclasses
---------------

XXX Explain this::

    >>> class Person(schema.Item):
    ...     fullname = schema.One(schema.String)
    ...     age = schema.One(schema.Integer)
    ...     parents = schema.Sequence()
    ...     children = schema.Sequence(inverse=parents)
    ...
    ...     schema.addClouds(
    ...         # endpoints can be defined using Role objects or strings
    ...         sharing = schema.Cloud(byCloud=[parents,children]),
    ...         export = schema.Cloud(byRef=["children"]),
    ...     )
    ...     def __repr__(self): return self.fullname

    >>> Joe = Person(fullname="Joe Schmoe", age=39)
    >>> Joe
    Joe Schmoe

    >>> Mary = Person(children=[Joe], fullname="Mary Quite Contrary")
    >>> list(Joe.parents)
    [Mary Quite Contrary]

Items created without an explicit "parent" have a repository parent of
``//userdata``::

    >>> Joe.itsParent
    <Item ... userdata ...>

    >>> Joe.itsParent.itsPath
    //userdata

Unless you set a ``__default_path__`` in your class, which is used to find
and/or create a default parent::

    >>> class Elsewhere(schema.Item):
    ...     __default_path__ = "//userdata/miscellaneous"

    >>> thingy = Elsewhere()
    >>> thingy.itsParent.itsPath
    //userdata/miscellaneous

    >>> thingy.itsParent is Elsewhere.getDefaultParent()
    True


Clouds are associated with the class' kind, with names that are generated
by capitalizing the cloud alias and adding 'Cloud' to them (matching previous
OSAF naming conventions)::

    >>> clouds = schema.itemFor(Person).clouds
    >>> list(clouds)
    [<Cloud ... SharingCloud ...>, <Cloud ... ExportCloud ...>]

    >>> sharing = clouds.getByAlias('sharing')
    >>> list(sharing.endpoints)
    [<Endpoint ... parents ...>, <Endpoint ... children ...>]

    >>> parents = sharing.endpoints.getByAlias('parents')
    >>> parents.includePolicy
    'byCloud'
    >>> parents.attribute
    ['parents']

    >>> export = clouds.getByAlias('export')
    >>> list(export.endpoints)
    [<Endpoint ... children ...>]

    >>> children = export.endpoints.getByAlias('children')
    >>> children.includePolicy
    'byRef'
    >>> children.attribute
    ['children']

Instances of an item class can be iterated over using the ``iterItems()`` class
method::

    >>> sorted(Person.iterItems(), key=lambda x:x.fullname)
    [Joe Schmoe, Mary Quite Contrary]

If no view is specified, the schema API's null repository view is searched, but
you can also specify a particular view::

    >>> rep = NullRepositoryView()
    >>> schema.initRepository(rep)
    >>> list(Person.iterItems(rep))
    []

By default, subclass instances are included in the results::

    >>> class StrangePerson(Person): pass
    >>> stranger = StrangePerson(fullname="The Stranger")
    >>> sorted(Person.iterItems(), key=lambda x:x.fullname)
    [Joe Schmoe, Mary Quite Contrary, The Stranger]

But you can turn this off by setting ``exact=True``, so that only instances
of the exact class are yielded::

    >>> sorted(Person.iterItems(exact=True), key=lambda x:x.fullname)
    [Joe Schmoe, Mary Quite Contrary]


Additional Metadata
===================

You can set additional attributes on your class' Kind by using
``schema.kindInfo()`` in the body of your item class::

    >>> class CalendarItem(schema.Item):
    ...     """This is just a demo"""
    ...     schema.kindInfo(
    ...         displayName = "Calendar Item",
    ...         displayAttribute = "XYZ"
    ...     )
    >>> schema.itemFor(CalendarItem).displayName
    'Calendar Item'
    >>> schema.itemFor(CalendarItem).displayAttribute
    'XYZ'
    >>> schema.itemFor(CalendarItem).description
    'This is just a demo'

These additional attributes are not normally inherited by subkinds::

    >>> class CalendarItemSubclass(CalendarItem):
    ...     pass
    >>> hasattr(schema.itemFor(CalendarItemSubclass), 'displayName')
    False

You can make multiple calls to ``kindInfo()`` in the same class::

    >>> class MultipleMetadata(schema.Item):
    ...     schema.kindInfo(displayName="Foo")
    ...     schema.kindInfo(displayAttribute="Bar")
    >>> schema.itemFor(MultipleMetadata).displayName
    'Foo'
    >>> schema.itemFor(MultipleMetadata).displayAttribute
    'Bar'

As long as you don't change anything you declared in a previous definition::

    >>> class ConflictingMetadata(schema.Item):
    ...     schema.kindInfo(displayName="Foo")
    ...     schema.kindInfo(displayName="Bar")
    Traceback (most recent call last):
      ...
    ValueError: 'displayName' defined multiple times for this class

You also have to only use keyword arguments that correspond to actual Kind
attributes::

    >>> class BadMetadata(schema.Item):
    ...     schema.kindInfo(madeUpName="xyz")
    Traceback (most recent call last):
      ...
    TypeError: 'madeUpName' is not an attribute of Kind

And calling ``kindInfo()`` is meaningless outside a class statement::

    >>> schema.kindInfo(displayName="x")
    Traceback (most recent call last):
      ...
    SyntaxError: kindInfo() must be called in the body of a class statement


Enumerations
============

    >>> class Importance(schema.Enumeration):
    ...     """Description goes here"""
    ...     schema.kindInfo(displayName="Importance Enum")
    ...     values = 'high', 'medium', 'low'

    >>> imp = schema.itemFor(Importance)
    >>> imp
    <Enumeration ... Importance ...>

    >>> imp.displayName
    'Importance Enum'

    >>> imp.description
    'Description goes here'

    >>> test_role = schema.Role(Importance)

    >>> imp.values
    ['high', 'medium', 'low']

    >>> class Rating(Importance):
    ...     values = "good", "bad"
    Traceback (most recent call last):
      ...
    TypeError: Enumerations cannot subclass or be subclassed

    >>> class BrokenEnum(schema.Enumeration):
    ...     values = "error"
    Traceback (most recent call last):
      ...
    TypeError: 'values' must be a tuple of 1 or more strings

    >>> class BrokenEnum2(schema.Enumeration):
    ...     values = ["x", "y"]
    Traceback (most recent call last):
      ...
    TypeError: 'values' must be a tuple of 1 or more strings

    >>> class BrokenEnum2(schema.Enumeration):
    ...     values = ()
    Traceback (most recent call last):
      ...
    TypeError: 'values' must be a tuple of 1 or more strings

    >>> class BrokenEnum3(schema.Enumeration):
    ...     def foo(self): pass
    Traceback (most recent call last):
      ...
    TypeError: ("Only 'values' may be defined in an enumeration class", 'foo', <function foo ...>)

    >>> class BadMetadata(schema.Enumeration):
    ...     schema.kindInfo(displayAttribute="xyz")
    ...     values = 'one', 'two'
    Traceback (most recent call last):
      ...
    TypeError: 'displayAttribute' is not an attribute of Enumeration



Structs
=======

    >>> class Size(schema.Struct):
    ...     __slots__ = 'width', 'height'

    >>> Size(1,2).width
    1
    >>> Size(1,2).height
    2
    >>> Size(3,4)
    Size(3, 4)

    >>> Size(4,5,6)
    Traceback (most recent call last):
      ...
    TypeError: ('Unexpected arguments', (6,))

    >>> class Wrong(Size): pass
    Traceback (most recent call last):
      ...
    TypeError: Structs cannot subclass or be subclassed

    >>> schema.itemFor(Size)
    <SchemaStruct ... Size ...>

    >>> schema.itemFor(Size).itsKind.itsPath
    //Schema/Core/Struct


--------------------
Schema API Internals
--------------------

Importing the ``application.schema`` module automatically loads the core and
Chandler schema packs into the null repository view, if they aren't already
loaded::

    >>> schema.nrv.findPath('//Schema/Core/Parcel')
    <Kind ...>


``global_lock``
    Many schema API operations are protected by a global lock object,
    ``schema.global_lock``, which is a ``threading.RLock``.  ``RLock`` objects
    support re-entrant locking for the same thread, which is important because
    many schema API operations are recursive.  The lock's normal state is to
    be unlocked::

        >>> schema.global_lock
        <_RLock(None, 0)>


``importString(moduleName)``
    Imports the named module (or named item within a module)::

        >>> import sys
        >>> schema.importString("sys") is sys
        True

        >>> schema.importString("application.tests")
        <module 'application.tests' from '...'>

        >>> import application.tests
        >>> schema.importString("application.tests") is application.tests
        True


``parcel_for_module(moduleName)``
    The ``parcel_for_module()`` API returns a parcel instance for the named
    module.  If the module has a ``__parcel__`` attribute, the parcel for
    the named module is returned instead::

        >>> application.tests.__parcel__ = "__builtin__"
        >>> schema.parcel_for_module("application.tests")
        <Parcel ... __builtin__ ...>

        >>> del application.tests.__parcel__    # clean up after the above test
        >>> schema.reset()
        <NullRepositoryView: null view>

    If the module has no ``__parcel__``, but it has a ``__parcel_class__``,
    then it is called to create a new parcel instance, passing in the name,
    parent parcel, and parcel kind::


        >>> def __parcel_class__(name, parent, kind):
        ...     print "Creating", name, parent, kind
        ...     print "Lock state:", schema.global_lock
        ...     return 456
        >>> application.tests.__parcel_class__ = __parcel_class__

        >>> def __parcel_class__(name, parent, kind):
        ...     print "Creating", name, parent, kind
        ...     print "Lock state:", schema.global_lock
        ...     from application.Parcel import Parcel
        ...     return Parcel(name, parent, kind)
        >>> application.__parcel_class__ = __parcel_class__

        >>> schema.parcel_for_module("application.tests")
        Creating application <Parcel ...parcels...> <Kind ...Parcel...>
        Lock state: <_RLock(MainThread, 2)>
        Creating tests <Parcel ...application...> <Kind ...Parcel...>
        Lock state: <_RLock(MainThread, 1)>
        456

        >>> schema.global_lock
        <_RLock(None, 0)>

    As you can see, the global lock is acquired during the recursive creation
    or retrieval of the parcel object, and released afterwards.

    The created parcel object is cached by the schema API so that subsequent
    invocations just return the same object, without re-invoking the
    ``__parcel_class__``::

        >>> schema.parcel_for_module("application.tests")
        456

        >>> # clean up dummy parcel setup
        >>> schema.reset()
        <NullRepositoryView: null view>
        >>> del application.tests.__parcel_class__
        >>> del application.__parcel_class__


``itemFor(obj)``
    Return the repository item that corresponds to the supplied object.  For
    example, ``itemFor(AnItemClass)`` returns the repository ``Kind`` that
    represents that class in the null view::

        >>> schema.itemFor(schema.Item)
        <Kind ... Item ...>

        >>> class TestItem(schema.Item):
        ...     __module__ = 'application.tests'  # pretend we're here

        >>> schema.itemFor(TestItem)
        <Kind ... TestItem ...>

        >>> kind = schema.itemFor(TestItem)

    And the generated kind has its class' module's parcel as its parent::

        >>> kind.itsParent is schema.parcel_for_module('application.tests')
        True

        >>> kind is schema.nrv.findPath('//parcels/application/tests/TestItem')
        True

    Its superkinds are the ``schema.itemFor()`` of its base classes::

        >>> list(kind.superKinds) == [schema.nrv.findPath('//Schema/Core/Item')]
        True

    Its kind is of course ``Kind``::

        >>> kind.itsKind is schema.nrv.findPath('//Schema/Core/Kind')
        True

    And its class is the class::

        >>> kind.classes['python'] is TestItem
        True


    Meanwhile, ``schema.itemFor(aRole)`` returns a repository ``Attribute``
    object representing that attribute in the null view::

        >>> schema.itemFor(Kind.subkinds)
        <Attribute ... subkinds ...>

        >>> schema.itemFor(Kind.subkinds).otherName
        'superkinds'

        >>> schema.itemFor(Kind.superkinds).otherName
        'subkinds'

        >>> schema.itemFor(Kind.subkinds).itsParent is schema.itemFor(Kind)
        True

        >>> schema.itemFor(Kind.subkinds) in schema.itemFor(Kind).attributes
        True

        >>> schema.itemFor(Kind.subkinds).cardinality
        'set'

        >>> schema.itemFor(Kind.subkinds).description is Kind.subkinds.doc
        True

    Roles must be activated in a class, however, in order to generate their
    ``Attribute``::

        >>> schema.itemFor(schema.One())
        Traceback (most recent call last):
        ...
        TypeError: role object used outside of schema.Item subclass

    And once a role's ``Attribute`` is generated, you cannot change any of its
    attributes any more::

        >>> Kind.subkinds.redirectTo = "xyz"
        Traceback (most recent call last):
        ...
        TypeError: Role object <Role subkinds of <class 'Kind'>> cannot be modified after use

``initRepository(repoView)``
    Ensure that the given repository view has been initialized with the core
    schemas for Chandler.

    >>> nrv = NullRepositoryView()
    >>> print nrv.findPath('//Schema/Core/Parcel')
    None

    >>> schema.initRepository(nrv)

    >>> nrv.findPath('//Schema/Core/Item')
    <Kind ... Item ...>


``synchronize(repoView, moduleName)``
    Ensure that the named module has been imported, and that its offered schema
    (if any) has been imported into the supplied repository view.

    >>> import application.tests
    >>> application.tests.__TestItem = TestItem
    >>> print nrv.findPath('//parcels/application/tests/TestItem')
    None
    >>> schema.synchronize(nrv, 'application.tests')
    >>> print nrv.findPath('//parcels/application/tests/TestItem')
    <Kind ... TestItem ...>

    >>> del application.tests.__TestItem

Descriptor Activation
---------------------

Placing an instance of a ``schema.ActiveDescriptor`` subclass in a class whose
metaclass is a subclass of ``schema.Activator`` automatically activates it,
by calling its ``activateInClass`` method::

    >>> class MockAttr(schema.ActiveDescriptor):
    ...     def activateInClass(self,cls,name):
    ...         print "activated %r in %r" % (name,cls)

    >>> class Test1(object):
    ...     __metaclass__ = schema.Activator
    ...     aRole = MockAttr()
    activated 'aRole' in <class 'Test1'>

    >>> class Test2(Test1):
    ...     test = MockAttr()
    activated 'test' in <class 'Test2'>
