<?xml version="1.0" encoding="iso-8859-1"?>

<Parcel itsName="webserver"
        xmlns="http://osafoundation.org/parcels/core"
        xmlns:me="http://osafoundation.org/parcels/osaf/framework/webserver"
        itemClass="osaf.framework.webserver.Web.WebParcel">

    <!-- The web server Kind.  Instances of this Kind are found via KindQuery
         at startup and activated.  You may define a server item in your own
         parcel, and it will run as well as the default one defined in the
         webserver/servers parcel.
      -->
    <Kind itsName="Server">
        <classes key="python" value="osaf.framework.webserver.Web.Server"/>

        <!-- The port to listen on.
          -->
        <Attribute itsName="port">
            <cardinality value="single"/>
            <type itemref="Integer"/>
            <required value="True"/>
        </Attribute>

        <!-- The file system path pointing to the server's doc root.  This
             path is relative to the directory of the parcel.xml that defines
             the server item.
          -->
        <Attribute itsName="path">
            <cardinality value="single"/>
            <type itemref="String"/>
            <required value="True"/>
        </Attribute>

        <!-- You may define custom twisted resources and associate them with
             this server.
          -->
        <Attribute itsName="resources">
            <cardinality value="list"/>
            <type itemref="me:Resource"/>
            <initialValue />
            <inverseAttribute itemref="me:Resource/server"/>
        </Attribute>

        <!-- You may specify other file system directories which will be used
             to serve specific URL locations.  (See the Directory Kind below).
          -->
        <Attribute itsName="directories">
            <cardinality value="list"/>
            <type itemref="me:Directory"/>
            <initialValue />
            <inverseAttribute itemref="me:Resource/server"/>
        </Attribute>
    </Kind>

    <!-- The web resource Kind.  Resources are a twisted.web concept (see
         "Resource Objects" within this page:
         http://www.twistedmatrix.com/documents/current/howto/using-twistedweb
         ).  A resource is a python class which handles HTTP requests and
         returns an HTML string.  For example, if you want your web server
         to send all HTTP requests for the location /xyzzy to be handled
         by a custom resource, define a resource item, set its location
         attribute to "/xyzzy", its resourceClass to "yourpackage.yourmodule.
         yourresource", and assign the server attribute to the desired
         server.
      -->
    <Kind itsName="Resource">
        <classes key="python" value="osaf.framework.webserver.Web.Resource"/>
        <Attribute itsName="location">
            <cardinality value="single"/>
            <type itemref="String"/>
            <required value="True"/>
        </Attribute>
        <Attribute itsName="server">
            <cardinality value="single"/>
            <type itemref="me:Server"/>
            <initialValue itemref="None"/>
            <inverseAttribute itemref="me:Server/resources"/>
        </Attribute>
        <Attribute itsName="resourceClass">
            <cardinality value="single"/>
            <type itemref="Class"/>
            <initialValue itemref="None"/>
        </Attribute>
    </Kind>

    <!-- The web directory Kind.  Defining instances of Directory, and
         associating them with a server is a way to "graft" a different
         file system directory into the server's document tree.  For example
         if you want HTTP requests for the /images/ location to not be
         served from the server's docroot/images directory, but rather from
         some other directory, you can define a Directory item with location
         of "/images" and path of /path/to/your/images/ and set its server
         attribute to a web server item.
      -->
    <Kind itsName="Directory">
        <Attribute itsName="location">
            <cardinality value="single"/>
            <type itemref="String"/>
            <required value="True"/>
        </Attribute>
        <Attribute itsName="path">
            <cardinality value="single"/>
            <type itemref="String"/>
            <initialValue itemref="None"/>
        </Attribute>
        <Attribute itsName="server">
            <cardinality value="single"/>
            <type itemref="me:Server"/>
            <initialValue itemref="None"/>
            <inverseAttribute itemref="me:Server/directories"/>
        </Attribute>
    </Kind>

</Parcel>
