<?xml version="1.0" encoding="iso-8859-1"?>

<!-- Parcel manifest for Pim Schema -->
<!-- $Revision$ -->
<!-- $Date$ -->
<!-- Copyright (c) 2003 Open Source Applications Foundation -->
<!-- License: http://osafoundation.org/Chandler_0.1_license_terms.htm -->

<core:Parcel describes="//parcels/osaf/contentmodel"
             itsName="contentmodel"
             xmlns:core="http://osafoundation.org/parcels/core"
             xmlns:contact="http://osafoundation.org/parcels/osaf/contentmodel/contacts"
             xmlns:calendar="http://osafoundation.org/parcels/osaf/contentmodel/calendar"
             xmlns:tasks="http://osafoundation.org/parcels/osaf/contentmodel/tasks"
             xmlns:mail="http://osafoundation.org/parcels/osaf/contentmodel/mail"
             xmlns:blocks="http://osafoundation.org/parcels/osaf/framework/blocks"
             xmlns:events="http://osafoundation.org/parcels/osaf/framework/notifications/schema"
             xmlns="http://osafoundation.org/parcels/osaf/contentmodel"
             itemClass="osaf.contentmodel.ContentModel.ContentModel">

  <core:displayName>Chandler Content Model</core:displayName>
  <core:description>Content Model for the 0.3 release</core:description>
  <core:version>0.3</core:version>
  <core:author>Open Source Applications Foundation</core:author>

<!-- Content Item -->
  
  <core:Attribute itemName="body">
    <core:displayName>Body</core:displayName>
    <core:type itemref="core:Text"/>
    <core:description>All Content Items may have a body to contain notes.  It's not decided yet whether
        this body would instead contain the payload for resource items such as presentations or 
        spreadsheets -- resource items haven't been nailed down yet -- but the payload may be different
        from the notes because payload needs to know MIME type, etc.</core:description>
  </core:Attribute>

  <core:Enumeration itemName="ImportanceEnum">
    <core:displayName>Importance Enum</core:displayName>
    <core:values>important</core:values>
    <core:values>normal</core:values>
    <core:values>fyi</core:values>
  </core:Enumeration>

  <core:Attribute itsName="importance">
    <core:displayName>Importance</core:displayName>
    <core:description>Most items are of normal importance (no value need be show), 
      however some things may be flagged either highly important or merely 'fyi'.</core:description>
    <core:description>This attribute is also used in the mail schema, so we shouldn't make any changes here that would break e-mail interoperability features.</core:description>
    <core:cardinality>single</core:cardinality>
    <core:type itemref="ImportanceEnum"/>
    <core:defaultValue type="ImportanceEnum">normal</core:defaultValue>
  </core:Attribute>

  <core:Enumeration itsName="ContextEnum">
    <core:displayName>Context Enum</core:displayName>
    <core:values>home</core:values>
    <core:values>work</core:values>
  </core:Enumeration>

  <core:Attribute itsName="context">
    <core:displayName>Context</core:displayName>
    <core:description>Context can be home, work, or another value provided by the user</core:description>
    <core:cardinality>single</core:cardinality>
    <core:type itemref="ContextEnum"/>
  </core:Attribute>

  <core:Attribute itsName="who">
    <redirectTo>creator</redirectTo>
  </core:Attribute>

  <core:Attribute itsName="about">
    <redirectTo>displayName</redirectTo>
  </core:Attribute>

  <core:Attribute itsName="date">
    <redirectTo>createdOn</redirectTo>
  </core:Attribute>

  <core:Kind itsName="ContentItem">
    <core:superKinds itemref="core:Item"/>
    <core:displayName>Default Content Item Display Name</core:displayName>
    <core:examples>an Calendar Event -- 'Lunch with Tug'</core:examples>
    <core:examples>a Contact -- 'Terry Smith'</core:examples>
    <core:examples>a Task -- 'mail 1040 to IRS'</core:examples>
    <core:description>Content Item is the abstract super-kind for things like Contacts, Calendar Events, Tasks, Mail Messages, and Notes. Content Items are user-level items, which a user might file, categorize, share, and delete.</core:description>
    <core:attributes itemref="body"/>
    <core:attributes itemref="importance"/>
    <core:attributes itemref="context"/>
    <core:attributes itemref="contact:creator"/>
    <core:attributes itemref="core:Parcel/createdOn"/>
    <core:attributes itemref="core:Parcel/modifiedOn"/>
    <core:attributes itemref="conversations"/>
    <!-- redirections -->
    <core:attributes itemref="who"/>
    <core:attributes itemref="date"/>
    <core:attributes itemref="about"/>

    <core:classes key="python">osaf.contentmodel.ContentModel.ContentItem</core:classes>
  </core:Kind>

  <!-- Note -->

  <core:Kind itsName="Note">
    <core:displayName>Note</core:displayName>
    <core:superKinds itemref="ContentItem"/>
    <core:classes key="python">osaf.contentmodel.Notes.Note</core:classes>
  </core:Kind>
  
  <!-- Conversation -->

  <core:Attribute itsName="conversations">
    <core:displayName>Conversations</core:displayName>
    <core:description>Conversations about this content item.</core:description>
    <core:issues>deletePolicy should be cascade</core:issues>
    <core:cardinality>list</core:cardinality>
    <core:type itemref="Conversation"/>
    <core:inverseAttribute itemref="subjectItem"/>
  </core:Attribute>

  <core:Attribute itsName="subjectItem">
    <core:displayName>Subject Item</core:displayName>
    <core:description>If this Conversation is a free-standing independent item, 
        then this attribute will be empty. If this Conversation is contained in 
        some other item, then this attribute will point to that item.</core:description>
    <core:required>False</core:required>
    <core:type itemref="ContentItem"/>
    <core:inverseAttribute itemref="conversations"/>
  </core:Attribute>

  <core:Attribute itsName="conversationLines">
    <core:displayName>Conversation Lines</core:displayName>
    <core:description>The list of lines of dialog in this conversation.</core:description>
    <core:issues>deletePolicy should be cascade</core:issues>
    <core:cardinality>list</core:cardinality>
    <core:type itemref="ConversationLine"/>
    <core:inverseAttribute itemref="containedInConversation"/>
  </core:Attribute>

  <core:Kind itsName="Conversation">
    <core:displayName>Conversation</core:displayName>
    <core:superKinds itemref="ContentItem"/>
    <core:attributes itemref="subjectItem"/>
    <core:attributes itemref="conversationLines"/>
    <core:classes key="python">osaf.contentmodel.Notes.Conversation</core:classes>
  </core:Kind>
  
  <core:Attribute itsName="line">
    <core:displayName>Line</core:displayName>
    <core:description>A line of text in a conversation, such as "okay, let's meet at 5:00".</core:description>
    <core:type itemref="core:String"/>
  </core:Attribute>

  <core:Attribute itsName="timestamp">
    <core:displayName>Timestamp</core:displayName>
    <core:type itemref="core:DateTime"/>
  </core:Attribute>

  <core:Attribute itsName="containedInConversation">
    <core:displayName>Contained in Conversation</core:displayName>
    <core:description>The Conversation that this line is a part of.</core:description>
    <core:required>True</core:required>
    <core:type itemref="Conversation"/>
    <core:inverseAttribute itemref="conversationLines"/>
  </core:Attribute>

  <core:Kind itsName="ConversationLine">
    <core:superKinds itemref="core:Item"/>
    <core:displayName>Conversation Line</core:displayName>
    <core:issues>Perhaps for performance reasons we should implement 'ConversationLine' 
        as a struct rather than a first-class Kind.</core:issues>
    <core:attributes itemref="line"/>
    <core:attributes itemref="timestamp"/>
    <core:attributes itemref="containedInConversation"/>
  </core:Kind>

<!-- Stamped Kinds -->

  <core:Attribute itsName="dueByDate">
    <core:displayName>Due by Date</core:displayName>
    <core:description>The date when a Task Event is due.</core:description>
    <core:type itemref="core:DateTime"/>
  </core:Attribute>

  <core:Attribute itsName="dueByRecurrence">
    <core:displayName>Due by Recurrence</core:displayName>
    <core:description>Recurrence information for a Task Event.</core:description>
    <cardinality>list</cardinality>
    <type itemref="calendar:RecurrencePattern"/>
  </core:Attribute>

  <core:Attribute itsName="dueByTickler">
    <core:displayName>Due by Tickler</core:displayName>
    <core:description>The reminder information for a Task Event.</core:description>
    <cardinality>list</cardinality>
    <type itemref="calendar:Reminder"/>
  </core:Attribute>

  <core:Kind itsName="TaskEventExtraAspect">
    <core:displayName>Task Event Extra Aspect</core:displayName>
    <core:description>The attributes specific to an item that is both </core:description>
    <core:description>a task and an event.  This is additional 'due by' information. </core:description>
    <attributes itemref="dueByDate"/>
    <attributes itemref="dueByRecurrence"/>
    <attributes itemref="dueByTickler"/>
  </core:Kind>

  <core:Kind itsName="MailedTask">
    <core:description>A Task stamped as a Mail, or vica versa</core:description>
    <core:superKinds itemref="Note"/>
    <core:superKinds itemref="mail:MailMessageAspect"/>
    <core:superKinds itemref="tasks:TaskAspect"/>
  </core:Kind>

  <core:Kind itsName="MailedEvent">
    <core:description>An Event stamped as a Mail, or vica versa</core:description>
    <core:superKinds itemref="Note"/>
    <core:superKinds itemref="mail:MailMessageAspect"/>
    <core:superKinds itemref="calendar:CalendarEventAspect"/>
  </core:Kind>

  <core:Kind itsName="EventTask">
    <core:description>A Task stamped as an Event, or vica versa</core:description>
    <core:superKinds itemref="Note"/>
    <core:superKinds itemref="calendar:CalendarEventAspect"/>
    <core:superKinds itemref="tasks:TaskAspect"/>
    <core:superKinds itemref="TaskEventExtraAspect"/>
  </core:Kind>

  <core:Kind itsName="MailedEventTask">
    <core:description>A Task stamped as an Event stamped as Mail, in any sequence</core:description>
    <core:superKinds itemref="Note"/>
    <core:superKinds itemref="mail:MailMessageAspect"/>
    <core:superKinds itemref="calendar:CalendarEventAspect"/>
    <core:superKinds itemref="tasks:TaskAspect"/>
    <core:superKinds itemref="TaskEventExtraAspect"/>
  </core:Kind>

<!-- Project -->

  <core:Attribute itsName="parentProject">
    <core:displayName>Parent Project</core:displayName>
    <core:description>Projects can be organized into hierarchies. Each project can have one parent.</core:description>
    <core:cardinality>single</core:cardinality>
    <core:type itemref="Project"/>
    <core:inverseAttribute itemref="subProjects"/>
  </core:Attribute>

  <core:Attribute itsName="subProjects">
    <core:displayName>Sub Projects</core:displayName>
    <core:description>Projects can be organized into hierarchies. Each project can have many sub-projects.</core:description>
    <core:cardinality>list</core:cardinality>
    <core:type itemref="Project"/>
    <core:inverseAttribute itemref="parentProject"/>
  </core:Attribute>

  <core:Kind itsName="Project">
    <core:superKinds itemref="core:Item"/>
    <core:displayName>Project</core:displayName>
    <core:examples>my "Housewarming Party" project</core:examples>
    <core:examples>my department's "Move to new building" project</core:examples>
    <core:examples>my company's "Open Seattle Store" project</core:examples>
    <core:description>Users can create projects to help organize their work. Users can take content items (like tasks and mail messages) and assign them to different projects.</core:description>
    <core:displayAttribute itemref="core:displayName"/>
    <core:attributes itemref="core:displayName"/>
    <core:attributes itemref="parentProject"/>
    <core:attributes itemref="subProjects"/>
    <core:classes key="python">osaf.contentmodel.ContentModel.Project</core:classes>
  </core:Kind>

<!-- Group -->
  <core:Kind itsName="Group">
    <core:displayName>"Playlist"/"Item Collection"</core:displayName>
    <core:description>See http://wiki.osafoundation.org/twiki/bin/view/Jungle/CollectionProject</core:description>
    <core:issues>We still need to work out some issues about how "playlists"/"item collections" are modeled.</core:issues>
    <core:issues>We need to find a name for these things.</core:issues>
    <core:superKinds itemref="ContentItem"/>
    <core:displayAttribute itemref="core:displayName"/>
    <core:attributes itemref="core:displayName"/>
    <core:classes key="python">osaf.contentmodel.ContentModel.Group</core:classes>
  </core:Kind>


  <!--
    Chandler Query
  -->

  <core:Enumeration itsName="queryEnumType">
    <core:values>Kind</core:values>
  </core:Enumeration>

  <core:Attribute itsName="queryEnum">
    <core:type itemref="queryEnumType"/>
    <core:defaultValue type="queryEnumType">Kind</core:defaultValue>
  </core:Attribute>

  <core:Attribute itsName="data">
    <core:type itemref="core:Item"/>
    <core:cardinality>list</core:cardinality>
  </core:Attribute>

  <core:Attribute itsName="results">
    <core:type itemref="core:Item"/>
    <core:cardinality>list</core:cardinality>
  </core:Attribute>

  <core:Attribute itsName="resultsStale">
    <core:type itemref="core:Boolean"/>
    <core:defaultValue type="core:Boolean">True</core:defaultValue>
  </core:Attribute>

  <core:Attribute itsName="queryOwner">
    <core:type itemref="core:Item"/>
    <core:cardinality>list</core:cardinality>
    <core:inverseAttribute itemref="rule"/>
  </core:Attribute>

  <core:Kind itsName="Query">
    <core:classes key="python">osaf.contentmodel.Query.Query</core:classes>
    <core:superKinds itemref="core:Item"/>

    <core:attributes itemref="queryOwner"/>

    <core:attributes itemref="queryEnum"/>
    <core:attributes itemref="data"/>
    <core:attributes itemref="results"/>
    <core:attributes itemref="resultsStale"/>
  </core:Kind>

  <!-- Item Collection stuff -->

  <!-- this gets sent whenever the items in a collection change -->
  <events:Event itsName="collection_changed"/>


  <core:Attribute itsName="collectionOwner">
    <core:type itemref="core:Item"/>
    <core:cardinality>list</core:cardinality>
    <core:inverseAttribute itemref="blocks:Block/contents"/>
    <initialValue/>
  </core:Attribute>

  <core:Attribute itsName="rule">
    <core:displayName>Rule</core:displayName>
    <core:cardinality>single</core:cardinality>
    <core:type itemref="Query"/>
    <core:inverseAttribute itemref="queryOwner"/>
    <initialValue ref="core:None"/>
  </core:Attribute>

  <core:Attribute itsName="inclusions">
    <core:cardinality>list</core:cardinality>
    <core:type itemref="core:UUID"/>
    <initialValue/>
  </core:Attribute>

  <core:Attribute itsName="exclusions">
    <core:cardinality>list</core:cardinality>
    <core:type itemref="core:UUID"/>
    <initialValue/>
  </core:Attribute>

  <core:Kind itsName="ItemCollection">
    <core:superKinds itemref="core:Item"/>
    <core:displayName>Item Collection</core:displayName>
    <core:attributes itemref="collectionOwner"/>
  </core:Kind>

  <core:Kind itsName="NamedCollection">
    <core:superKinds itemref="ItemCollection"/>
    <core:displayName>Named Collection</core:displayName>
    <core:attributes itemref="rule"/>
    <core:attributes itemref="inclusions"/>
    <core:attributes itemref="exclusions"/>
    <core:classes key="python">osaf.contentmodel.ItemCollection.ItemCollection</core:classes>
  </core:Kind>

  <core:Kind itsName="AdHocCollection">
    <core:superKinds itemref="ItemCollection"/>
    <core:displayName>Ad-Hoc Collection</core:displayName>
    <core:attributes itemref="inclusions"/>
    <core:attributes itemref="exclusions"/>
    <core:classes key="python">osaf.contentmodel.ItemCollection.ItemCollection</core:classes>
  </core:Kind>

  <core:Kind itsName="EphemeralCollection">
    <core:superKinds itemref="ItemCollection"/>
    <core:displayName>Ephemeral Collection</core:displayName>
    <core:attributes itemref="rule"/>
    <core:classes key="python">osaf.contentmodel.ItemCollection.ItemCollection</core:classes>
  </core:Kind>


</core:Parcel>
