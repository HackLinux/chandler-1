<?xml version="1.0" encoding="iso-8859-1"?>

<!-- $Revision$ -->
<!-- $Date$ -->
<!-- Copyright (c) 2003 Open Source Applications Foundation -->
<!-- License: http://osafoundation.org/Chandler_0.1_license_terms.htm -->

<Parcel describes="//parcels/osaf/contentmodel/mail"
        itsName="mail"
        itemClass="osaf.contentmodel.mail.Mail.MailParcel"
        xmlns="http://osafoundation.org/parcels/core"
        xmlns:content="http://osafoundation.org/parcels/osaf/contentmodel"
        xmlns:contact="http://osafoundation.org/parcels/osaf/contentmodel/contacts"
        xmlns:calendar="http://osafoundation.org/parcels/osaf/contentmodel/calendar"
        xmlns:mail="http://osafoundation.org/parcels/osaf/contentmodel/mail"
        xmlns:tasks="http://osafoundation.org/parcels/osaf/contentmodel/tasks">

  <displayName>Mail Content Model</displayName>
  <description>Content Model for the Mail Messages, Email Accounts, and other things related to email/</description>
  <version>0.3</version>
  <author>Open Source Applications Foundation</author>

<!-- Attachment -->
  <Kind itsName="Attachment">
    <superKinds itemref="Item"/>
    <displayName>Attachment</displayName>
    <examples>'Budget.doc'</examples>
    <examples>'funny.jpg'</examples>
    <description>
      An Attachment represents an e-mail attachment.
    </description>
    <issues>see http://lists.osafoundation.org/pipermail/design/2003-April/002400.html</issues>
    <issues>I'd argue for calling Attachments either MIMEElement or MessagePart.  In a multipart/mixed 
        message (essentially any message with an attachment), there sort of isn't a body.  The part that 
        is looks like an RFC822 body is simply the text "This is a MIME-encapsulated message."  What is 
        *presented to the user as the body* is usually the first displayable part or the first text 
        part. -Ducky</issues>
    <issues>From the schema, it isn't clear if the body and attachments have been converted into 
        Chandler Items or if they are unmolested text.  (Ditto for From, Date, and the headers.)  
        To do spam control right you have to keep around the exact, original, unmolested text 
        of the message.  Anti-spam programs find useful information in the strangest places -- for example, there's one program commonly used by spammers that has a distrinctive set of delimiters between message parts. You also can't run it through the spam filter, decide you're done, munge it, and throw away the original because the Bayesian classifiers need to have the original message to retrain on if the user decides that the classifier got it wrong.  So somewhere, you have to keep around the original. -Ducky</issues>
    <classes key="python">osaf.contentmodel.mail.Mail.Attachment</classes>
  </Kind>

<!-- Email Account -->
  <Attribute itsName="serverName">
    <displayName>Server DNS Name</displayName>
    <type itemref="String"/>
  </Attribute>
  
  <Attribute itsName="serverPort">
    <displayName>Server Port</displayName>
    <cardinality>single</cardinality>
    <type itemref="Integer"/>
    <initialValue type="Integer">143</initialValue>
  </Attribute>

  <Attribute itsName="accountName">
    <displayName>Account Name</displayName>
    <description>My user name on this server.</description>
    <issues>This should always be a single-line string that displays in a one-line text field rather than a scrolling text box.</issues>
    <type itemref="String"/>
  </Attribute>

  <Attribute itsName="accountType">
    <displayName>Account Type</displayName>
    <description>POP, IMAP, etc.</description>
    <type itemref="String"/>
  </Attribute>
  
  <Attribute itsName="messageDownloadSequence">
    <displayName>Message Download Sequence</displayName>
    <description>The uid or number of the last message downloaded</description>
    <cardinality>single</cardinality>
    <type itemref="Long"/>
    <initialValue type="Long">0</initialValue>
  </Attribute>

  <Attribute itsName="password">
    <displayName>Password</displayName>
    <description>This could either be a password or some other sort of authentication info. We can use it for whatever is needed for this account type.</description>
    <issues>This should not be a simple string. We need some solution for encrypting it.</issues>
    <type itemref="String"/>
  </Attribute>

  <Attribute itsName="downloadedMail">
    <displayName>Downloaded Mail</displayName>
    <description>Mail messages that have been sent to this account, and retrieved by Chandler.</description>
    <cardinality>list</cardinality>
    <type itemref="mail:MailMessage"/>
    <inverseAttribute itemref="mail:downloadAccount"/>
    <initialValue/>
  </Attribute>

  <Attribute itsName="returnAddress">
    <displayName>Return Address</displayName>
    <description>The Email Address to use as the return address for mail sent from this account.</description>
    <type itemref="mail:EmailAddress"/>
    <inverseAttribute itemref="mail:returnAddressInverse"/>
  </Attribute>

  <Attribute itsName="returnAddressInverse">
    <displayName>Used as Return Address by Email Account</displayName>
    <description>A list of Email Accounts that use this Email Address as the return address for mail sent from the account.</description>
    <cardinality>list</cardinality>
    <type itemref="mail:EmailAccount"/>
    <inverseAttribute itemref="mail:returnAddress"/>
  </Attribute>

  <Attribute itsName="pollingFrequency">
    <displayName>Polling Frequency</displayName>
    <description>Some description of frequency, like 'never', or 'every 5 minutes'</description>
    <issues>This shouldn't really be of type String. Maybe RelativeDateTime, or some new data type?</issues>
    <type itemref="String"/>
  </Attribute>

  <Kind itsName="EmailAccount">
    <superKinds itemref="Item"/>
    <displayName>Email Account</displayName>
    <examples>My work account on the company IMAP server at mail.BigCompany.com</examples>
    <examples>My home account on my ISP's POP server.</examples>
    <description>An Email Account item is used to keep track of the info Chandler needs in order to retrieve your mail from a mail server.</description>
    <issues>We might also want some more attributes, to keep track of things like 'port number', 'use SSL (boolean)', 'check for messages at startup (boolean)', </issues>
    <displayAttribute itemref="mail:accountName"/>
    <attributes itemref="mail:serverName"/>
    <attributes itemref="mail:serverPort"/>
    <attributes itemref="mail:accountName"/>
    <attributes itemref="mail:accountType"/>
    <attributes itemref="mail:password"/>
    <attributes itemref="mail:downloadedMail"/>
    <attributes itemref="mail:returnAddress"/>
    <attributes itemref="mail:messageDownloadSequence"/>
    <attributes itemref="mail:pollingFrequency"/>
    <classes key="python">osaf.contentmodel.mail.Mail.EmailAccount</classes>
  </Kind>

<!-- Email Address -->
  <Attribute itsName="emailAddress">
    <displayName>Email Address</displayName>
    <examples>"abe@osafoundation.org"</examples>
    <examples>"Abe Lincoln {abe@osafoundation.org}" (except with angle brackets instead of '{' and '}')</examples>
    <description>An RFC 822 email address.</description>
    <type itemref="String"/>
  </Attribute>

  <Attribute itsName="vcardType">
    <displayName>vCard type</displayName>
    <description>Typical vCard types are values like 'internet', 'x400', and 'pref'. Chandler will use this attribute when doing import/export of Contact records in vCard format.</description>
    <type itemref="String"/>
  </Attribute>

  <Kind itsName="EmailAddress"> 
    <superKinds itemref="Item"/>
    <displayName>Email Address</displayName>
    <examples>"abe@osafoundation.org"</examples>
    <description>An item that represents a simple email address, plus all the info we might want to associate with it, like lists of message to and from this address.</description>
    <issues>Someday we might want to have other attributes.  One example might be an 'is operational' flag that tells whether this address is still in service, or whether mail to this has been bouncing lately. Another example might be a 'superceded by' attribute, which would point to another Email Address item.</issues>
    <issues>Depending on how we end up using the 'emailAddress' attribute, we might want to break it into two attributes, one for the "Abe Lincoln" part, and one for the "abe@osafoundation.org" part. Alternatively, we might want to use one of Andi's compound types, with two fields.</issues>
    <displayAttribute itemref="mail:emailAddress"/>
    <attributes itemref="mail:emailAddress"/>
    <attributes itemref="mail:vcardType"/>
    <attributes itemref="contact:onceBelongedTo"/>
    <attributes itemref="contact:emailAddressOwner"/>
    <attributes itemref="mail:returnAddressInverse"/>
    <attributes itemref="mail:sentToInverse"/>
    <attributes itemref="mail:replyAddressInverse"/>
    <attributes itemref="calendar:participatingIn"/>
    <attributes itemref="tasks:requestedTasks"/>
    <attributes itemref="tasks:taskRequests"/>
    <classes key="python">osaf.contentmodel.mail.Mail.EmailAddress</classes>
  </Kind>

<!-- Email Message -->
  <Attribute itsName="subject">
    <displayName>Subject</displayName>
    <description>The subject line of an email message.</description>
    <type itemref="String"/>
  </Attribute>

  <Attribute itsName="sentTo">
    <displayName>Sent To</displayName>
    <description>...add description here...</description>
    <cardinality>list</cardinality>
    <type itemref="mail:EmailAddress"/>
    <inverseAttribute itemref="mail:sentToInverse"/>
  </Attribute>

  <Attribute itsName="sentToInverse">
    <displayName>Messages sent to this address</displayName>
    <description>A list of messages that have this address in their header</description>
    <cardinality>list</cardinality>
    <type itemref="mail:MailMessage"/>
    <inverseAttribute itemref="mail:sentTo"/>
  </Attribute>

  <Attribute itsName="toAddress">
    <displayName>to: Address</displayName>
    <description>...add description here...</description>
    <cardinality>list</cardinality>
    <type itemref="mail:EmailAddress"/>
    <superAttribute itemref="mail:sentTo"/>
  </Attribute>

  <Attribute itsName="ccAddress">
    <displayName>cc: Address</displayName>
    <description>...add description here...</description>
    <cardinality>list</cardinality>
    <type itemref="mail:EmailAddress"/>
    <superAttribute itemref="mail:sentTo"/>
  </Attribute>

  <Attribute itsName="bccAddress">
    <displayName>bcc: Address</displayName>
    <description>...add description here...</description>
    <cardinality>list</cardinality>
    <type itemref="mail:EmailAddress"/>
    <superAttribute itemref="mail:sentTo"/>
  </Attribute>

  <Attribute itsName="replyAddress">
    <displayName>Reply Address</displayName>
    <description>The Email address listed as the reply to address in the header of this message.</description>
    <type itemref="mail:EmailAddress"/>
    <inverseAttribute itemref="mail:replyAddressInverse"/>
  </Attribute>

  <Attribute itsName="replyAddressInverse">
    <displayName>Used as Reply Address In</displayName>
    <description>A list of mail messages that give this email address as a reply address.</description>
    <cardinality>list</cardinality>
    <type itemref="mail:MailMessage"/>
    <inverseAttribute itemref="mail:replyAddress"/>
  </Attribute>

  <Attribute itsName="dateSent">
    <displayName>Date Sent</displayName>
    <description>...add description here...</description>
    <issues>Is dateSent the unmolested Date string as it arrives (which the RFC says can have one of three formats, and which has a fourth incorrect but reasonably common format) or is it converted into a Chandler DateTime (or whatever) Item? - Ducky</issues>
    <type itemref="DateTime"/>
  </Attribute>

  <Attribute itsName="dateReceived">
    <displayName>Date Received</displayName>
    <description>...add description here...</description>
    <type itemref="DateTime"/>
  </Attribute>

  <Attribute itsName="deliveryReceiptRequested">
    <displayName>Delivery Receipt Requested</displayName>
    <description>...add description here...</description>
    <type itemref="Boolean"/>
  </Attribute>

  <Attribute itsName="readReceiptRequested">
    <displayName>Read Receipt Requested</displayName>
    <description>...add description here...</description>
    <type itemref="Boolean"/>
  </Attribute>

  <Attribute itsName="messageHeader">
    <displayName>Message Header</displayName>
    <description>...add description here...</description>
    <type itemref="String"/>
  </Attribute>

  <Attribute itsName="messageBody">
    <displayName>Message Body</displayName>
    <description>a MIME-body, complete with content-type, content-encoding, character encoding, 
        etc.</description>
    <issues>Ducky says: There are a whole bunch of things that need to be specified for the body 
        (or attachment) of a message, including content-type (jpg, html, text, word), 
        content-encoding (7-bit or 8-bit ASCII?), character encoding (Shift-JIS, Big 5?), length, 
        etc. What you might want to do is declare an as-yet-unspecified MIME-body that holds all 
        of the information and the body of the message part (body or attachment).</issues>
    <type itemref="Text"/>
  </Attribute>

  <Attribute itsName="relatedMessages">
    <displayName>Related Messages</displayName>
    <description>This 'relatedMessages' attribute is the super-attribute of attributes like 'forwardedIn' and 'repliedToIn'.</description>
    <issues>This should have itself as an inverseAttribute.</issues>
    <cardinality>list</cardinality>
    <type itemref="mail:MailMessage"/>
  </Attribute>

  <Attribute itsName="forwardedIn">
    <displayName>Forwarded In</displayName>
    <description>a list of other Email Messages that contain forwarded copies of this message</description>
    <cardinality>list</cardinality>
    <type itemref="mail:MailMessage"/>
    <superAttribute itemref="mail:relatedMessages"/>
  </Attribute>

  <Attribute itsName="repliedToIn">
    <displayName>Replied To In</displayName>
    <description>a list of other Email Messages that are replies to this message</description>
    <cardinality>list</cardinality>
    <type itemref="mail:MailMessage"/>
    <superAttribute itemref="mail:relatedMessages"/>
  </Attribute>

  <Attribute itsName="inReplyTo">
    <displayName>In Reply To</displayName>
    <description>the Email Message that this message is a reply to</description>
    <type itemref="mail:MailMessage"/>
    <superAttribute itemref="mail:relatedMessages"/>
  </Attribute>

  <Attribute itsName="attachments">
    <displayName>Attachments</displayName>
    <description>...add description here...</description>
    <issues>This should have as an inverseAttribute an 'attachedTo' attribute on the 'Attachment'.</issues>
    <cardinality>list</cardinality>
    <type itemref="mail:Attachment"/>
  </Attribute>

  <Attribute itsName="characterEncoding">
    <displayName>Character Encoding</displayName>
    <description>...add description here...</description>
    <type itemref="String"/>
  </Attribute>

  <Attribute itsName="hasBeenRead">
    <displayName>Has Been Read</displayName>
    <description>...add description here...</description>
    <issues>I suspect that has-been-read is probably a subset of Status.  It traditionally is. -Ducky</issues>
    <type itemref="Boolean"/>
  </Attribute>

  <Attribute itsName="downloadAccount">
    <displayName>Download Account</displayName>
    <description>used when sending the reply, to make the reply be 'from' the right account</description>
    <type itemref="mail:EmailAccount"/>
    <inverseAttribute itemref="mail:downloadedMail"/>
  </Attribute>

  <Attribute itsName="serverStatus">
    <displayName>Server Status</displayName>
    <description>The server status can be either 'on server' or 'deleted from server'.</description>
    <type itemref="String"/>
  </Attribute>

  <Attribute itsName="deliveryStatus">
    <displayName>Delivery Status</displayName>
    <description>The delivery status can be 'queued', 'sent', or 'unsent'.</description>
    <type itemref="String"/>
  </Attribute>

  <Attribute itsName="spamScore">
    <displayName>Spam Score</displayName>
    <type itemref="Integer"/>
  </Attribute>

  <Attribute itsName="who">
    <redirectTo>toAddress</redirectTo>
  </Attribute>

  <Attribute itsName="whoFrom">
    <redirectTo>replyAddress</redirectTo>
  </Attribute>

  <Attribute itsName="about">
    <redirectTo>subject</redirectTo>
  </Attribute>

  <Attribute itsName="date">
    <redirectTo>dateReceived</redirectTo>
  </Attribute>  

  <Kind itsName="MailMessageMixin">
    <displayName>Mail Message Mixin Kind</displayName>
    <description>This is the set of Message-specific attributes.</description>
    <description>This Kind is 'mixed in' to others kinds to create Kinds that can be instantiated</description>
    <attributes itemref="mail:subject"/>
    <attributes itemref="mail:sentTo"/>
    <attributes itemref="mail:toAddress"/>
    <attributes itemref="mail:ccAddress"/>
    <attributes itemref="mail:bccAddress"/>
    <attributes itemref="mail:replyAddress"/>
    <attributes itemref="mail:dateSent"/>
    <attributes itemref="mail:dateReceived"/>
    <attributes itemref="mail:deliveryReceiptRequested"/>
    <attributes itemref="mail:readReceiptRequested"/>
    <attributes itemref="mail:messageHeader"/>
    <attributes itemref="mail:messageBody"/>
    <attributes itemref="mail:relatedMessages"/>
    <attributes itemref="mail:forwardedIn"/>
    <attributes itemref="mail:repliedToIn"/>
    <attributes itemref="mail:inReplyTo"/>
    <attributes itemref="mail:attachments"/>
    <attributes itemref="mail:characterEncoding"/>
    <attributes itemref="mail:hasBeenRead"/>
    <attributes itemref="content:importance"/>
    <attributes itemref="mail:downloadAccount"/>
    <attributes itemref="mail:serverStatus"/>
    <attributes itemref="mail:deliveryStatus"/>
    <attributes itemref="mail:spamScore"/>

    <classes key="python">osaf.contentmodel.mail.Mail.MailMessageMixin</classes>
      
    <Cloud itsName="Cloud">
      <kind itemref="mail:MailMessageMixin"/>
      <Endpoint itsName="sentTo">
        <attribute value="sentTo"/>
        <includePolicy value="byValue"/>
      </Endpoint>
      <endpoints itemref="mail:MailMessageMixin/Cloud/sentTo"/>

      <Endpoint itsName="toAddress">
        <attribute value="toAddress"/>
        <includePolicy value="byValue"/>
      </Endpoint>
      <endpoints itemref="mail:MailMessageMixin/Cloud/toAddress"/>

      <Endpoint itsName="ccAddress">
        <attribute value="ccAddress"/>
        <includePolicy value="byValue"/>
      </Endpoint>
      <endpoints itemref="mail:MailMessageMixin/Cloud/ccAddress"/>

      <Endpoint itsName="bccAddress">
        <attribute value="bccAddress"/>
        <includePolicy value="byValue"/>
      </Endpoint>
      <endpoints itemref="mail:MailMessageMixin/Cloud/bccAddress"/>

      <Endpoint itsName="replyAddress">
        <attribute value="replyAddress"/>
        <includePolicy value="byValue"/>
      </Endpoint>
      <endpoints itemref="mail:MailMessageMixin/Cloud/replyAddress"/>

      <Endpoint itsName="attachments">
        <attribute value="attachments"/>
        <includePolicy value="byValue"/>
      </Endpoint>
      <endpoints itemref="mail:MailMessageMixin/Cloud/attachments"/>

      <Endpoint itsName="downloadAccount">
        <attribute value="downloadAccount"/>
        <includePolicy value="byValue"/>
      </Endpoint>
      <endpoints itemref="mail:MailMessageMixin/Cloud/downloadAccount"/>


    </Cloud>
    <issues>Once we have attributes and a cloud defined for Attachment, we need to include
    attachments by cloud, and not by value.</issues>
      
    <issues>Really not sure what to do with the "downloadAccount" attribute and
        how it should be included in the cloud.  For now it's by value.</issues>
      
      
  </Kind>

  <Kind itsName="MailMessage">
    <displayName>Mail Message</displayName>
    <description>A Mail Message represents any sort of email message, sent or received.</description>
    <issues>We need another attribute. A boolean attribute to indicate whether this message was an incoming message or outgoing message. (I suspect that we won't want to derive whether something was in or out.  If we base it on headers, the headers could potentially be forged. -Ducky)</issues>
    <issues>We probably don't want to have both 'hasBeenRead' and 'status'.</issues>
    <superKinds itemref="content:Note"/>
    <superKinds itemref="mail:MailMessageMixin"/>
    <displayAttribute itemref="mail:subject"/>
    <!-- redirections -->
    <attributes itemref="mail:who"/>
    <attributes itemref="mail:whoFrom"/>
    <attributes itemref="mail:about"/>
    <attributes itemref="mail:date"/>
    <classes key="python">osaf.contentmodel.mail.Mail.MailMessage</classes>
  </Kind>

</Parcel>
