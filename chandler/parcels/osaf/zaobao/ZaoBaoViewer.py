#!/usr/bin/env python
# generated by wxGlade 0.2 on Mon Feb 17 15:00:47 2003
"""This is the main file for the ZaoBao parcel
"""
#Python modules
import threading
import os

#Chandler modules
from application.ViewerParcel import *
from application.Application import app
from application.SplashScreen import SplashScreen

#ZaoBao modules
from OSAF.zaobao.ZaoBaoUI import *
from OSAF.zaobao.model import RSSData
from OSAF.zaobao import rssfinder

class ZaoBaoViewer (ViewerParcel):
    def __init__(self):
        ViewerParcel.__init__ (self)
        self.lastSelectedKey = None
        self.hasPermission = 1
        self.RunFirstTime()

    def GetNotificationList(self):
        return [RSSData.FEED_CHANGED_NOTIFICATION]
   
    def ReceiveNotification(self, notification):
        if notification.GetName() == RSSData.FEED_CHANGED_NOTIFICATION:
            print "zaobao viewer received notification"
            myWxViewer = app.association[id(self)]
            channel = notification.GetData()
            myWxViewer.RSSIndexView.update(channel,
                                           {'event':'RSS item changed','key':id(channel)})
            
        
    def GetAccessibleViews(self, who):
        """ return a list of accessible views (for now, ones that are public)
        """
        self.hasPermission = 1
        if self.hasPermission: return [self.displayName]
        else: return []
    
    def GetViewObjects(self, url, jabberID):
        return RSSData.loadLocalObjects().values()
        
    def AddObjectsToView(self, url, objectList, lastFlag):
        """pass new objects for display to the wxViewer"""
        viewer = app.association.get(id(self))
        if (viewer): viewer.AddObjectsToView(url, objectList, lastFlag)
    
    def HasPermission(self, jabberID, url):
        return self.hasPermission
    
    def SetPermission(self, permission):
        self.hasPermission = permission == 'public'
    
    def getSharingPolicy(self):
        """Hard-coded policies for now"""
        if self.hasPermission: return 'public'
        else: return 'private'
        
    def GoToURL(self, remoteAddress, url):
        ViewerParcel.GoToURL(self, remoteAddress, url)
        viewer = app.association.get(id(self))
        if viewer: viewer.GoToURL(remoteAddress, url)
        return true

    def RunFirstTime(self):
        #print 'running first time'
        return None
                    
        
class wxZaoBaoViewer(wxViewerParcel):
    def OnInit(self):
        self.titleFont = wxFont(16, wxSWISS, wxNORMAL, 
                                wxNORMAL, false, "Arial")
        
        #create splitter window
        self.twoPane = wxSplitterWindow(self, -1)
        self.twoPane.SetMinimumPaneSize(100) # prevent unsplitting
        
        #create main UI elements
        self.titleText = wxStaticText(self, -1, self.model.displayName)
        self.titleText.SetFont(self.titleFont)
        self.urlTextArea = wxTextCtrl(self, -1, "",style=wxTE_PROCESS_ENTER)
        self.addURLButton = wxButton(self, -1, _("Add"))
        self.addURLButton.SetSize((45, -1))
        self.addURLButton.SetToolTipString(_("Add me"))
        self.addURLButton.SetDefault()
        self.RSSIndexView = wxZaoBaoIndexView(self.twoPane, -1, 
                                              style=wxLC_REPORT|wxSUNKEN_BORDER|wxLC_SINGLE_SEL)
        self.RSSItemView = wxZaoBaoItemView(self.twoPane, -1,path=self.model.path + os.sep)
        self.RSSIndexView.setItemView(self.RSSItemView)
        self.twoPane.SplitHorizontally(self.RSSIndexView, self.RSSItemView)
        self.twoPane.SetSashPosition(250)
       
        self.__do_layout()
        self.__doMenus()

        EVT_TEXT_ENTER(self, self.urlTextArea.GetId(), self.onAddRssUrl)
        EVT_BUTTON(self, self.addURLButton.GetId(), self.onAddRssUrl)

        #get top-most parent window to set status bar
        aFrame = self
        while not isinstance(aFrame,wxFrame):
            aFrame = aFrame.GetParent()
        self.frame = aFrame
        self.RSSItemView.SetRelatedFrame(aFrame,_("ZaoBao - your daily fix"))
        self.RSSItemView.SetRelatedStatusBar(0)

        self.RSSIndexView.register(self)
        self.RSSIndexView.updateRSSFeeds()
        
    def getFeeds(self,rssURL):
        max = 9
        progressDlg = wxProgressDialog("Searching the Internet...",
                                       "Looking for feed: " + rssURL,
                                       max,
                                       NULL,
                                       wxPD_CAN_ABORT|wxPD_APP_MODAL)
        feeds = rssfinder.getFeeds(rssURL,progressDlg)
        progressDlg.Destroy()
        return feeds
    
    def onAddRssUrl(self, event):
        rssURL = self.urlTextArea.GetLineText(0)
        try:
            possibleFeeds = self.getFeeds(rssURL)
            if possibleFeeds == "cancelled": return
            noOfPossibleFeeds = len(possibleFeeds)
            possibleFeeds = [feed 
                             for feed in possibleFeeds
                             if not self.RSSIndexView.alreadySubscribed(feed)]
            noOfFeeds = len(possibleFeeds)
            if noOfFeeds == 0:
                if noOfPossibleFeeds > 0:
                    wxMessageBox(rssURL + " is already subscribed")
                else:
                    wxMessageBox("Could not find any channels for " + rssURL)
            else:
                if noOfFeeds > 1:
                    dlg = wxMultipleChannelsDialog(possibleFeeds,self, -1,"")
                    dlg.ShowModal()
                    dlg.Destroy()
            
                for rssURL in possibleFeeds:
                    try:
                        anRSSData = RSSData.getNewRSSChannel(rssURL)
                    except RSSData.RSSChannelException, e:
                        answer = wxMessageBox(e.args)
                    else:
                        self.RSSIndexView.addRSS(anRSSData)
                self.RSSIndexView.selectKey(id(anRSSData))
        except IOError, e:
            wxMessageBox(e.args[0])
        
    #def onAddRssUrl(self, event):
        #"""Add RSS URL typed into text input area, checking first if
        #input text is a valid RSS URL"""
        #self.SetCursor(wxHOURGLASS_CURSOR)
        #rssURL = self.urlTextArea.GetLineText(0)
        #defaultPrefix = 'http://'
        #if self.RSSIndexView.alreadySubscribed(rssURL) or self.RSSIndexView.alreadySubscribed(defaultPrefix + rssURL):
            #wxMessageBox(rssURL +_(" is already subscribed."))
        #else:
            #success = 1
            #try:
                #anRSSData = RSSData.getNewRSSChannel(rssURL)
            #except RSSData.RSSChannelException, e:
                #if (rssURL[:4] != 'http'):
                    #try:
                        #anRSSData = RSSData.getNewRSSChannel(defaultPrefix + rssURL)
                    #except RSSData.RSSChannelException, e:
                        #success = 0
                #else: success = 0
            #if success: self.RSSIndexView.addRSS(anRSSData)
            #else: answer = wxMessageBox(e.args)
        #self.SetCursor(wxNullCursor)
        
    def OnReload(self):
        """Spawns a thread to check for updates from RSS feed"""
        print "reload pressed"
        RSSData._updateRSSFeeds()
 
    def onAboutZaoBaoItem(self, event):
        pageLocation = pageLocation = self.model.path + os.sep + "AboutZaoBao.html"
        # KDS: not sure if "About ZaoBao" should be internationalized or not.
        infoPage = SplashScreen(self, "About ZaoBao", pageLocation, false)
        if infoPage.ShowModal():
            infoPage.Destroy()
    
    def editPageTemplate(self, event):
        """Edits RSSItemView HTML template"""
        self.RSSItemView.editPageTemplate(path=self.model.path + os.sep)
    
    def editItemTemplate(self, event):
        """Edits each item within the RSSItemView HTML template"""
        self.RSSItemView.editItemTemplate(path=self.model.path + os.sep)
    
    def __doMenus(self):
        EVT_MENU(self, XRCID("EditPageTemplate"), self.editPageTemplate)
        EVT_MENU(self, XRCID("EditItemTemplate"), self.editItemTemplate)
        EVT_MENU(self, XRCID("MarkAs"), self.RSSIndexView.onMarkItem)
        EVT_MENU(self, XRCID("DeleteItem"), self.RSSIndexView.onDeleteItem)
        EVT_MENU(self, XRCID("RefreshItem"), self.RSSIndexView.onRefreshItem)
        EVT_MENU(self, XRCID("AboutZaoBaoMenuItem"), self.onAboutZaoBaoItem)
        
    def __do_layout(self):
        # begin wxGlade: wxZaoBaoFrame.__do_layout
        mainSizer = wxBoxSizer(wxVERTICAL)
        urlSizer = self.urlSizer = wxBoxSizer(wxHORIZONTAL)
        urlSizer.Add(self.titleText, 0, wxALL, 5)
        urlSizer.Add(self.urlTextArea, 1, wxALL, 5)
        urlSizer.Add(self.addURLButton, 0, wxALL, 5)
        mainSizer.Add(urlSizer, 0, wxEXPAND, 0)
        mainSizer.Add(self.twoPane, 1, wxEXPAND, 0)

        #RSSData.registerStatus(self)

        #self.SetSizerAndFit(mainSizer)
        self.SetAutoLayout(1)
        self.SetSizer(mainSizer)
        self.Layout()
        # end wxGlade

    def update(self, updateObj, args):
        """Updates from Observables"""
        if isinstance(updateObj, wxZaoBaoIndexView):
            self.urlTextArea.SetValue(args.getRSSURL())
        else:
            self.frame.GetStatusBar().SetStatusText(args.get('event',''))
     
    def Deactivate(self):
        """Removes observers from the model (RSSData) and remembers the previously
        selected RSS feed just before deactivation"""
        wxViewerParcel.Deactivate(self)
    
    def Activate(self):
        wxViewerParcel.Activate(self)
        

    def GoToURL(self, remoteAddress, url):
       self.RSSIndexView.loadObjects(remoteAddress,url)
       if (remoteAddress):
           self.titleText.SetLabel(self.self.model.displayName+ ' (' + remoteAddress + ')')
           self.sharingText = wxStaticText(self,-1,_("Loading..."))
           self.urlSizer.Add(self.sharingText, 0, wxALL, 8)
       else:
           self.sharingText = wxStaticText(self,-1,_("Sharing Policy:"))
           sharingChoices = [_("private"),_("public")]
           self.sharingCombo = wxComboBox(self,-1,self.model.getSharingPolicy(),
                                          choices=sharingChoices,style=wxCB_READONLY)
           self.urlSizer.Add(self.sharingText, 0, wxALL, 8)
           self.urlSizer.Add(self.sharingCombo, 0, wxALL, 5)
           EVT_COMBOBOX(self,self.sharingCombo.GetId(),self.OnSetPermission)
       self.Layout()
       
    def AddObjectsToView(self, url, objectList, lastFlag):
        indexView = self.RSSIndexView
        for rssData in objectList:
            assert(isinstance(rssData,RSSData.RSSData))
            indexView.addRSS(rssData)
        if lastFlag:
            self.sharingText.SetLabel(_("All Loaded"))
            doAutoWidth = indexView.GetItemCount() > 0
            for (col,colInfo) in indexView._columnInfo.items():
                indexView.SetColumnWidth(col, doAutoWidth and wxLIST_AUTOSIZE or colInfo['defaultWidth'])
                indexView._colSortFlag[col] = colInfo['sortFlag']
        
    def OnSetPermission(self, event):
        comboBox = event.GetEventObject()
        data = comboBox.GetString(comboBox.GetSelection())
        self.model.SetPermission(data)
        
       
# end of class wxZaoBaoView
