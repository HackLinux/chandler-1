#!/usr/bin/env python
# generated by wxGlade 0.2 on Mon Feb 17 15:00:47 2003
"""This is the main file for the ZaoBao parcel
"""
#Python modules
import threading
import os

#Chandler modules
from application.ViewerParcel import *
from application.Application import app
from application.SplashScreen import SplashScreen

#ZaoBao modules
from parcels.OSAF.zaobao.ZaoBaoUI import *
from parcels.OSAF.zaobao import RSSData

class ZaoBaoViewer (ViewerParcel):
    def __init__(self):
        ViewerParcel.__init__ (self)
        self.lastSelectedKey = None
        self.hasPermission = 1
        self.RunFirstTime()

    def GetAccessibleViews(self, who):
        """ return a list of accessible views (for now, ones that are public)
        """
        self.hasPermission = 1
        if self.hasPermission: return [self.displayName]
        else: return []
    
    def GetViewObjects(self, url, jabberID):
        return RSSData.loadLocalObjects().values()
        
    def AddObjectsToView(self, url, objectList, lastFlag):
        """pass new objects for display to the wxViewer"""
        viewer = app.association.get(id(self))
        if (viewer): viewer.AddObjectsToView(url, objectList, lastFlag)
    
    def HasPermission(self, jabberID, url):
        return self.hasPermission
    
    def SetPermission(self, permission):
        self.hasPermission = permission == 'public'
    
    def getSharingPolicy(self):
        """Hard-coded policies for now"""
        if self.hasPermission: return 'public'
        else: return 'private'
        
    def GoToURL(self, remoteAddress, url):
        ViewerParcel.GoToURL(self, remoteAddress, url)
        viewer = app.association.get(id(self))
        if viewer: viewer.GoToURL(remoteAddress, url)
        return true

    def RunFirstTime(self):
        #print 'running first time'
        if (not hasattr(self,'_v_initialized')) or (not self._v_initialized):
            #self.refreshRSSFeeds()
            self._v_initialized = 1

    def refreshRSSFeeds(self):
        t = threading.Thread(target=self._refreshRSSFeeds)
        t.setDaemon(1)
        t.start()
        
    def _refreshRSSFeeds(self):
        while 1:
            RSSData.updateRSSFeeds()
            time.sleep(5*60) # @@@ hardcoded for 5 mins
        
    def __setstate__(self, state):
        super(ZaoBaoViewer, self).__setstate__(state)
        self.RunFirstTime()
            
        
class wxZaoBaoViewer(wxViewerParcel):
    _titleFont = wxFont(16, wxSWISS, wxNORMAL, wxNORMAL, false, "Arial")

    def OnInit(self):
        
        #create splitter window
        self.twoPane = wxSplitterWindow(self, -1)
        self.twoPane.SetMinimumPaneSize(100) # prevent unsplitting
        
        #create main UI elements
        self.titleText = wxStaticText(self, -1, self.model.displayName)
        self.titleText.SetFont(wxZaoBaoViewer._titleFont)
        self.urlTextArea = wxTextCtrl(self, -1, "",style=wxTE_PROCESS_ENTER)
        self.addURLButton = wxButton(self, -1, "Add")
        self.addURLButton.SetSize((45, -1))
        self.addURLButton.SetToolTipString("Add me")
        self.addURLButton.SetDefault()
        self.RSSIndexView = wxZaoBaoIndexView(self.twoPane, -1, 
                                              style=wxLC_REPORT|wxSUNKEN_BORDER|wxLC_SINGLE_SEL)
        self.RSSItemView = wxZaoBaoItemView(self.twoPane, -1,path=self.model.path + os.sep)
        self.RSSIndexView.setItemView(self.RSSItemView)
        self.twoPane.SplitHorizontally(self.RSSIndexView, self.RSSItemView)
        self.twoPane.SetSashPosition(250)
       
        self.__do_layout()
        self.__doMenus()

        EVT_TEXT_ENTER(self, self.urlTextArea.GetId(), self.onAddRssUrl)
        EVT_BUTTON(self, self.addURLButton.GetId(), self.onAddRssUrl)

        aFrame = self
        while not isinstance(aFrame,wxFrame):
            aFrame = aFrame.GetParent()
        self.frame = aFrame
        self.RSSItemView.SetRelatedFrame(aFrame,'ZaoBao - your daily fix')
        self.RSSItemView.SetRelatedStatusBar(0)

        self.RSSIndexView.register(self)
        self.RSSIndexView.updateRSSFeeds()
        
    def onAddRssUrl(self, event):
        """Add RSS URL typed into text input area, checking first if
        input text is a valid RSS URL"""
        self.SetCursor(wxHOURGLASS_CURSOR)
        rssURL = self.urlTextArea.GetLineText(0)
        defaultPrefix = 'http://'
        if self.RSSIndexView.alreadySubscribed(rssURL) or self.RSSIndexView.alreadySubscribed(defaultPrefix + rssURL):
            wxMessageBox(rssURL +' is already subscribed.')
        else:
            success = 1
            try:
                anRSSData = RSSData.getNewRSSData(rssURL)
            except RSSData.RSSDataException, e:
                if (rssURL[:4] != 'http'):
                    try:
                        anRSSData = RSSData.getNewRSSData(defaultPrefix + rssURL)
                    except RSSData.RSSDataException, e:
                        success = 0
                else: success = 0
            if success: self.RSSIndexView.addRSS(anRSSData)
            else: answer = wxMessageBox(e.args)
        self.SetCursor(wxNullCursor)
        
    def onReload(self, event):
        """Spawns a thread to check for updates from RSS feed"""
        pass

    def onAboutZaoBaoItem(self, event):
        pageLocation = self.model.path + os.sep + "AboutZaoBao.html"
        infoPage = SplashScreen(self, _("About ZaoBao"), pageLocation, false)
        if infoPage.ShowModal():
            infoPage.Destroy()
    
    def editPageTemplate(self, event):
        """Edits RSSItemView HTML template"""
        self.RSSItemView.editPageTemplate(path=self.model.path + os.sep)
    
    def editItemTemplate(self, event):
        """Edits each item within the RSSItemView HTML template"""
        self.RSSItemView.editItemTemplate(path=self.model.path + os.sep)
    
    def __doMenus(self):
        EVT_MENU(self, XRCID("EditPageTemplate"), self.editPageTemplate)
        EVT_MENU(self, XRCID("EditItemTemplate"), self.editItemTemplate)
        EVT_MENU(self, XRCID("MarkAs"), self.RSSIndexView.onMarkItem)
        EVT_MENU(self, XRCID("DeleteItem"), self.RSSIndexView.onDeleteItem)
        EVT_MENU(self, XRCID("RefreshItem"), self.RSSIndexView.onRefreshItem)
        EVT_MENU(self, XRCID("AboutZaoBaoMenuItem"), self.onAboutZaoBaoItem)
        
    def __do_layout(self):
        # begin wxGlade: wxZaoBaoFrame.__do_layout
        mainSizer = wxBoxSizer(wxVERTICAL)
        urlSizer = self.urlSizer = wxBoxSizer(wxHORIZONTAL)
        urlSizer.Add(self.titleText, 0, wxALL, 5)
        urlSizer.Add(self.urlTextArea, 1, wxALL, 5)
        urlSizer.Add(self.addURLButton, 0, wxALL, 5)
        mainSizer.Add(urlSizer, 0, wxEXPAND, 0)
        mainSizer.Add(self.twoPane, 1, wxEXPAND, 0)

        #RSSData.registerStatus(self)

        #self.SetSizerAndFit(mainSizer)
        self.SetAutoLayout(1)
        self.SetSizer(mainSizer)
        self.Layout()
        # end wxGlade

    def update(self, updateObj, args):
        """Updates from Observables"""
        if isinstance(updateObj, wxZaoBaoIndexView):
            self.urlTextArea.SetValue(args.getRSSURL())
        else:
            self.frame.GetStatusBar().SetStatusText(args.get('event',''))
     
    def Deactivate(self):
        """Removes observers from the model (RSSData) and remembers the previously
        selected RSS feed just before deactivation"""
        self.RSSIndexView.deactivate()
        wxViewerParcel.Deactivate(self)
    
    def Activate(self):
        wxViewerParcel.Activate(self)
        

    def GoToURL(self, remoteAddress, url):
       self.RSSIndexView.loadObjects(remoteAddress,url)
       if (remoteAddress):
           self.titleText.SetLabel(self.self.model.displayName+ ' (' + remoteAddress + ')')
           self.sharingText = wxStaticText(self,-1,"Loading...")
           self.urlSizer.Add(self.sharingText, 0, wxALL, 8)
       else:
           self.sharingText = wxStaticText(self,-1,"Sharing Policy:")
           sharingChoices = ['private','public']
           self.sharingCombo = wxComboBox(self,-1,self.model.getSharingPolicy(),
                                          choices=sharingChoices,style=wxCB_READONLY)
           self.urlSizer.Add(self.sharingText, 0, wxALL, 8)
           self.urlSizer.Add(self.sharingCombo, 0, wxALL, 5)
           EVT_COMBOBOX(self,self.sharingCombo.GetId(),self.OnSetPermission)
       self.Layout()
       
    def AddObjectsToView(self, url, objectList, lastFlag):
        indexView = self.RSSIndexView
        for rssData in objectList:
            assert(isinstance(rssData,RSSData.RSSData))
            indexView.addRSS(rssData)
        if lastFlag:
            self.sharingText.SetLabel('All Loaded')
            doAutoWidth = indexView.GetItemCount() > 0
            for (col,colInfo) in indexView._columnInfo.items():
                indexView.SetColumnWidth(col, doAutoWidth and wxLIST_AUTOSIZE or colInfo['defaultWidth'])
                indexView._colSortFlag[col] = colInfo['sortFlag']
        
    def OnSetPermission(self, event):
        comboBox = event.GetEventObject()
        data = comboBox.GetString(comboBox.GetSelection())
        self.model.SetPermission(data)
        
       
# end of class wxZaoBaoView
