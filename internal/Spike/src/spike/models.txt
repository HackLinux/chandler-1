=================
Observable Models
=================

A key source of events used by Spike's higher layers are changes to data
structures.  The ``spike.models`` module supplies base classes and event types
for such observable data structures.

>>> from spike import models


---------------
Observable Sets
---------------

The most basic data structure used by Spike is the set.  It is used to model
relationships of both "single" and "set" cardinalities, treating "single" as
a set with at most one member.  This allows the dynamic interface to be
uniform, in that code in higher layers usually only needs to know about one
kind of collection and one kind of event.


Change Events
=============

There is are two types of change event for sets: ``models.Validation``, and
``models.SetChanged``.  Both types use similar event instances, with the
``sender`` being the set that was changed, and the ``added`` and ``removed``
attributes being iterables containing the objects added or removed from the
set::

    >>> models.Validation(models.Set(),[1,2],[3,4])
    <Change for Set([]): removed=[1, 2], added=[3, 4]>

    >>> models.SetChanged(models.Set(),[1,2],[3,4])
    <Change for Set([]): removed=[1, 2], added=[3, 4]>

The only practical difference between the two kinds of events is that
subscribers to ``model.Validation`` events will receive the event before
subscribers to ``model.SetChanged``.  However, the same ``Validation`` instance
is also sent to ``SetChanged`` subscribers, if none of the ``Validation``
subscribers raised an error.  This arrangement allows ``Validation`` listeners
to reject a change (by raising an error) before any dependent changes are made
by the ``SetChanged`` subscribers.

For demonstration purposes, we'll use this function to print change events as
they happen::

    >>> def printEvent(event): print event


Set Objects
===========

You can create a set using ``models.Set(anIterable)``::

    >>> models.Set([1,2,3])
    Set([1, 2, 3])

Or you can create an empty set using ``models.Set()`` with no arguments::

    >>> s = models.Set()
    >>> s
    Set([])

We can now subscribe to change events on our set::

    >>> models.SetChanged.subscribe(s,printEvent)
    >>> models.SetChanged.getReceivers(s)
    set([<weakref at ...; to 'function' at ... (printEvent)>])

Sets also have a simple convenience API for managing subscriptions to their
``Validation`` and ``SetChanged``:: events

    >>> s.addValidator(printEvent)
    >>> models.Validation.getReceivers(s)
    set([<weakref at ...; to 'function' at ... (printEvent)>])
    >>> s.getValidators()
    set([<weakref at ...; to 'function' at ... (printEvent)>])

    >>> s.removeValidator(printEvent)
    >>> s.getValidators()
    set([])
    >>> models.Validation.getReceivers(s)
    set([])

    >>> s.unsubscribe(printEvent)
    >>> models.SetChanged.getReceivers(s)
    set([])

    >>> s.subscribe(printEvent)
    >>> models.SetChanged.getReceivers(s)
    set([<weakref at ...; to 'function' at ... (printEvent)>])

    >>> s.getReceivers()
    set([<weakref at ...; to 'function' at ... (printEvent)>])

The ``.add()`` method adds a new member::

    >>> s.add(1)
    <Change for Set([1]): removed=[], added=[1]>
    >>> s
    Set([1])

    >>> s.add(2)
    <Change for Set([1, 2]): removed=[], added=[2]>
    >>> s
    Set([1, 2])

Adding the same object (as determined by ``==``) more than once has
no effect::

    >>> s.add(1)
    >>> s
    Set([1, 2])

Items can be removed with the ``.remove()`` method::

    >>> s.remove(1)
    <Change for Set([2]): removed=[1], added=[]>
    >>> s
    Set([2])

as long as they're actually present, of course::

    >>> s.remove(1)
    >>> s
    Set([2])

(Notice, by the way, that no change events are generated when the collection's
contents don't actually change.)

Lists are iterable, and have a length::

    >>> len(s)
    1
    >>> list(s)
    [2]

As a convenience, you can use the ``replace()`` method to add or remove
multiple items, and this will only generate a single change event for all the
items that were actually added or removed::

    >>> s.replace([2],[5])
    <Change for Set([5]): removed=[2], added=[5]>
    >>> s
    Set([5])

    >>> s.replace(add=[9,10,9,10])
    <Change for Set([5, 9, 10]): removed=[], added=[9, 10]>
    >>> s
    Set([5, 9, 10])

    >>> s.replace(remove=[5,53,9,27])
    <Change for Set([10]): removed=[5, 9], added=[]>
    >>> s
    Set([10])

If you add and remove the same item, however, it doesn't show up in the change
event::

    >>> s.replace(remove=[10],add=[10, 5])
    <Change for Set([10, 5]): removed=[], added=[5]>

    >>> s.replace(remove=[10],add=[10])     # no-op


And you can also use the ``reset()`` method to clear the set's contents, and
optionally supply an iterable of new contents::

    >>> s.reset([1,2,3])
    <Change for Set([1, 2, 3]): removed=[5, 10], added=[1, 2, 3]>
    >>> s
    Set([1, 2, 3])

    >>> s.reset()
    <Change for Set([]): removed=[1, 2, 3], added=[]>
    >>> s
    Set([])


Typed Sets
==========

Sets can be type-restricted, such that only instances of the specified type(s)
can be included::

    >>> s = models.Set(type=str)
    >>> s.add(1)
    Traceback (most recent call last):
    ...
    TypeError: 1 is not of type str
    >>> s
    Set([], type=str)

Note that all values to be added are checked before any changes are made, and
so the *entire operation* either succeeds or fails as a unit.  No events are
generated if the operation fails, and the set retains its original contents::

    >>> s.add('a')
    >>> s
    Set(['a'], type=str)

    >>> s.replace(remove=['a'], add=['x','y',24])
    Traceback (most recent call last):
    ...
    TypeError: 24 is not of type str

    >>> s
    Set(['a'], type=str)

If more than one type is acceptable, you can use a tuple of types, e.g.::

    >>> s = models.Set(type=(int,str))
    >>> s.replace(add=[1,2,"x","y"])
    >>> s
    Set([1, 2, 'x', 'y'], type=int/str)

    >>> s.add(1.25)
    Traceback (most recent call last):
    ...
    TypeError: 1.25 is not of type int/str

You can also use an empty type tuple to indicate that *no* type is acceptable,
in which case the set will be both empty and immutable::

    >>> s = models.Set(type=())
    >>> s
    Set([], type=())
    >>> s.replace(add=[1])
    Traceback (most recent call last):
    ...
    TypeError: Null set cannot be changed


Validation and Rollback
=======================

If an event handler raises an exception during a change to a set, the change
is rolled back, and the set attempts to issue a change event that reverses the
first event.

You can use this to implement arbitrary validation, like requiring a set to
have no more than a certain number of items.  For example::

    >>> s = models.Set()

    >>> def rejectMultiple(event):
    ...     print event
    ...     if len(event.sender)>1:
    ...         raise ValueError("Too many items added", event.added)

    >>> s.subscribe(printEvent)
    >>> s.addValidator(rejectMultiple)

    >>> s.add(1)    # event printed by both printEvent and rejectMultiple
    <Change for Set([1]): removed=[], added=[1]>
    <Change for Set([1]): removed=[], added=[1]>

    >>> s.add(2)
    Traceback (most recent call last):
    ...
    ValueError: ('Too many items added', [2])

    >>> s
    Set([1])

Doctest doesn't display the event output when there's an untrapped exception,
so let's try that again with the error trapped so we can see the events::

    >>> try:
    ...     s.add(2)
    ... except ValueError:
    ...     pass
    <Change for Set([1, 2]): removed=[], added=[2]>

So there's the validation event that tried to add ``2``.  However, since an
error was raised before validation was complete, there was no ``SetChanged``
event sent, and so it wasn't reversed.  Let's move ``rejectMultiple`` so it
only listens to ``SetChanged`` events, so we can see a rollback taking place::

    >>> s.removeValidator(rejectMultiple)
    >>> s.subscribe(rejectMultiple)
    >>> s.unsubscribe(printEvent)
   
    >>> try:
    ...     s.add(2)
    ... except ValueError:
    ...     pass
    <Change for Set([1, 2]): removed=[], added=[2]>
    <Change for Set([1]): removed=[2], added=[]>

As you can see, an event is first generated for the add attempt, and then a
second event for the rollback.

Notice, by the way, that rollback events are only generated if no validator
rejected the change.  This means that validators should *not* change system
state, because if they do it will not be rolled back.  Change listeners on the
other hand, are free to make changes, but should avoid raising exceptions, in
order to ensure that all change listeners receive the event.

