

  README file for PyLucene build and maintenance details
  ------------------------------------------------------

  Contents
  --------

   - Notes for Linux
   - Notes for Mac OS X 10.3
   - Notes for Mac OS X 10.2
   - Notes for Windows
   - Manual source code changes


  Notes for Linux
  ---------------

  gcc 3.x on Linux installations appears to ship with gcj. If your gcc
  installation does not include gcj, you need to upgrade it. It also appears,
  however, that gcj is better when newer and we hence require gcc 3.3 at the
  minimum for this package to build.

  To build a version of gcc suitable for gcj use on Linux download a version
  of gcc 3.3.x, 3.3.2 for example, from one of the gcc download mirrors such
  as:
    ftp://mirrors.rcn.net/pub/sourceware/gcc/releases/gcc-3.3.2/gcc-3.3.2.tar.bz2
  and follow the instructions below:

    - CWD=`pwd`
    - mkdir gcc-3.3.2
    - cd gcc-3.3.2
    - bunzip2 -c ../gcc-3.3.2.tar.bz2 | tar -xvf -
    - mkdir build install
    - cd build
    - ../gcc-3.3.2/configure --enable-threads=posix --prefix=$CWD/gcc-3.3.2/install --enable-languages=c,c++,java
    - make bootstrap
    - make install

  Note that these instructions do not cause your currently installed gcc
  compiler to be superceded. In order to use the compiler you just built,
  prepend $CWD/gcc-3.3.2/install/bin to your PATH environment variable.


  Notes for Mac OS X 10.3
  -----------------------

  Mac OS X 10.3 development tools do not ship with gcj. A separate version
  of gcc, with gcj, needs to be built. At the time of this writing, April
  16th, 2004, the gcc 3.4 snapshot dated 20040407 should be used. It may be
  downloaded from a number of gcc download mirrors such as:
      ftp://mirrors.rcn.net/pub/sourceware/gcc/snapshots/3.4-20040407/gcc-3.4-20040407.tar.bz2
  For build instructions, please refer to http://gcc.gnu.org or carefully
  follow the simple instructions below. In any case, this separate gcc build
  should not supercede or be installed in your OS X gcc install tree.

    - CWD=`pwd`
    - mkdir gcc-3.4
    - cd gcc-3.4
    - bunzip2 -c ../gcc-3.4-20040107.tar.bz2 | tar -xvf -
    add #define LARGE_CONFIG to boehm-gc/include/private/gc_priv.h
    - mkdir build install
    - cd build
    - ../gcc-3.4-20040107/configure --enable-threads=posix --prefix=$CWD/gcc-3.4/install
    - make bootstrap
    - make install

  The path given to --prefix needs to be absolute (hence the use of $CWD)

  For the hardhat build to succeed you need to set the GCJ_HOME environment
  variable to $CWD/gcc-3.4/install

  This version of gcc is only suitable for building PyLucene, the rest of
  Chandler needs to be built with OS X's gcc. Do not put this version of
  gcc on your PATH.


  Notes for Mac OS X 10.2
  -----------------------

  The notes below show that it would be easier to upgrade to 10.3.

  Mac OS X 10.2 development tools do not ship with gcj. A separate version
  of gcc, with gcj, needs to be built. At the time of this writing, January
  8th, 2004, the gcc 3.4 snapshot dated 20040107 should be used. 
  The gcc compiler shipped with the Mac OS X 10.2 development doesn't appear
  to be suitable for building gcc 3.4, you hence need to download and build
  gcc 3.3.2 for that purpose first.
  It may be downloaded from a number of gcc download mirrors such as:
      ftp://mirrors.rcn.net/pub/sourceware/gcc/releases/gcc-3.3.2/gcc-3.3.2.tar.bz2
  For build instructions, please refer to http://gcc.gnu.org or carefully
  follow the simple instructions below. In any case, this separate gcc build
  should not supercede or be installed in your OS X gcc install tree.

    - CWD=`pwd`
    - mkdir gcc-3.3.2
    - cd gcc-3.3.2
    - bunzip2 -c ../gcc-3.3.2.tar.bz2 | tar -xvf -
    - mkdir build install
    - cd build
    - ../gcc-3.3.2/configure --enable-threads=posix --enable-gcj=yes --prefix=$CWD/gcc-3.3.2/install
    - make bootstrap
    - make install

  The path given to --prefix needs to be absolute (hence the use of $CWD)

  Then, for the purpose of building gcc 3.4 only, prepend
  $CWD/gcc-3.3.2/install/bin to your PATH and follow the instructions in
  'Notes for Mac OS X 10.3' above for building gcc 3.4.

  Mac OS X 10.2 does not ship with libiconv either. Using the regular Mac
  OS X 10.2 development tools gcc compiler, build libiconv following the
  instructions below. Libiconv 1.9.1 may be downloaded from:
      http://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.9.1.tar.gz
    - tar xvzf libiconv-1.9.1.tar.gz
    - cd libiconv-1.9.1
    - ./confifure --prefix=$CWD/gcc-3.4/install
    - make
    - make install

  Once your Chandler build is complete, figure out how to resolve the
  '___eprintf symbol not found' error that occurs when importing the PyLucene
  python module into Chandler's python build.

  Alternatively, upgrade to Mac OS X 10.3.


  Notes for Windows
  -----------------

  On Windows, PyLucene is built with gcc 3.3.1 installed on top of the MinGW
  3.1 compiler suite, a minimalistic port of GNU's gcc compiler suite to
  Windows. The Makefile for the Windows build, Makefile.mingw, requires
  Microsoft's Nmake.exe.

  To install the MinGW compiler suite, follow the instructions below:
   - download http://prdownloads.sf.net/mingw/MinGW-3.1.0-1.exe?download
   - download http://prdownloads.sf.net/mingw/gcc-core-3.3.1-20030804-1.tar.gz?download
   - download http://prdownloads.sf.net/mingw/gcc-g++-3.3.1-20030804-1.tar.gz?download
   - download http://prdownloads.sf.net/mingw/gcc-java-3.3.1-20030804-1.tar.gz?download
   - choose a root directory for your installation, say d:\mingw-3.1, the
     MinGW-3.1.0-1.exe installer will prompt you
   - install MinGW-3.1.0-1.exe by running this executable
   - install the three gcc components (core, g++ and java) by untarring the
     archives while in the d:\mingw-3.1 directory

  For the hardhat build to succeed you need to set the GCJ_HOME environment
  variable to d:\mingw-3.1 (using a backslash).


  Manual source code changes
  --------------------------

  Some changes had to be made to various source files in order to enable
  gcj compilation:

  - lucene/src/java/org/apache/lucene/queryParser/QueryParser.java

    Around line 802, there are two methods that have the same name as
    static fields, something gcj does not support.
    Renamed jj_la1_0() and jj_la1_1() by adding a _mth suffix.

  - ../db/libdb_java/db_java_wrap.c
    Around line 18, added gcj/windows code to undefine JNIEXPORT and JNICALL

  - PyLucene.py and PyLucene_wrap.cxx
    These files are generated with swig 1.3.20 from PyLucene.i as follows:
      swig -modern -I$(BINDIR)/classes -c++ -python PyLucene.i

  - lucene/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java
    lucene/src/java/org/apache/lucene/analysis/de/GermanStemmer.java

    On Windows, MinGW's gcj does not support gcj's --encoding flag very
    well, so we have to convert the german analyser and stemmer sources from
    iso-8859-1 to utf-8 as follows:
      cp -p GermanAnalyzer.java GermanAnalyzer.java.iso-8859-1
      cp -p GermanStemmer.java GermanStemmer.java.iso-8859-1
      iconv -f 'iso-8859-1' -t 'utf-8' GermanAnalyzer.java.iso-8859-1 > GermanAnalyzer.java
      iconv -f 'iso-8859-1' -t 'utf-8' GermanStemmer.java.iso-8859-1 > GermanStemmer.java

  - lucene.lst, db.lst, store.lst

    On a typical Windows environment there doesn't seem to be a unix like
    find utility. These files are generated for Windows only as follows:
      find lucene/src/java -name '*.java' > lucene.lst
      find ../db/java/src/com/sleepycat/db -regex '.*/db/[^/]*java' > db.lst
      find store -name '*.java' -print > store.lst
