--- lucene-1.3-final/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java	Wed Oct  8 17:08:52 2003
+++ lucene-1.3-final-patched/src/java/org/apache/lucene/analysis/de/GermanAnalyzer.java	Thu Jan  8 21:30:57 2004
@@ -71,7 +71,7 @@
  * exclusion list is empty by default.
  *
  * @author    Gerhard Schwarz
- * @version   $Id: GermanAnalyzer.java,v 1.7 2003/10/09 00:08:52 ehatcher Exp $
+ * @version   $Id: GermanAnalyzer.java,v 1.2 2004/01/09 05:29:17 vajda Exp $
  */
 public class GermanAnalyzer extends Analyzer
 {
@@ -80,14 +80,14 @@
      */
     private String[] GERMAN_STOP_WORDS = {
 	"einer", "eine", "eines", "einem", "einen",
-	"der", "die", "das", "dass", "daß",
+	"der", "die", "das", "dass", "daÃŸ",
 	"du", "er", "sie", "es",
 	"was", "wer", "wie", "wir",
 	"und", "oder", "ohne", "mit",
 	"am", "im", "in", "aus", "auf",
 	"ist", "sein", "war", "wird",
 	"ihr", "ihre", "ihres",
-	"als", "für", "von", "mit",
+	"als", "fÃ¼r", "von", "mit",
 	"dich", "dir", "mich", "mir",
 	"mein", "sein", "kein",
 	"durch", "wegen", "wird"
--- lucene-1.3-final/src/java/org/apache/lucene/analysis/de/GermanStemmer.java	Wed Oct  8 17:08:52 2003
+++ lucene-1.3-final-patched/src/java/org/apache/lucene/analysis/de/GermanStemmer.java	Thu Jan  8 21:30:57 2004
@@ -56,11 +56,11 @@
 
 /**
  * A stemmer for German words. The algorithm is based on the report
- * "A Fast and Simple Stemming Algorithm for German Words" by Jörg
+ * "A Fast and Simple Stemming Algorithm for German Words" by JÃ¶rg
  * Caumanns (joerg.caumanns@isst.fhg.de).
  *
  * @author    Gerhard Schwarz
- * @version   $Id: GermanStemmer.java,v 1.7 2003/10/09 00:08:52 ehatcher Exp $
+ * @version   $Id: GermanStemmer.java,v 1.2 2004/01/09 05:29:17 vajda Exp $
  */
 public class GermanStemmer
 {
@@ -197,12 +197,12 @@
     /**
      * Do some substitutions for the term to reduce overstemming:
      *
-     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,
-     *   "ß" is substituted by "ss"
+     * - Substitute Umlauts with their corresponding vowel: Ã¤Ã¶Ã¼ -> aou,
+     *   "ÃŸ" is substituted by "ss"
      * - Substitute a second char of a pair of equal characters with
      *   an asterisk: ?? -> ?*
      * - Substitute some common character combinations with a token:
-     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!
+     *   sch/ch/ei/ie/ig/st -> $/Â§/%/&/#/!
      */
     private void substitute( StringBuffer buffer )
     {
@@ -213,18 +213,18 @@
 		buffer.setCharAt( c, '*' );
 	    }
 	    // Substitute Umlauts.
-	    else if ( buffer.charAt( c ) == 'ä' ) {
+	    else if ( buffer.charAt( c ) == 'Ã¤' ) {
 		buffer.setCharAt( c, 'a' );
 	    }
-	    else if ( buffer.charAt( c ) == 'ö' ) {
+	    else if ( buffer.charAt( c ) == 'Ã¶' ) {
 		buffer.setCharAt( c, 'o' );
 	    }
-	    else if ( buffer.charAt( c ) == 'ü' ) {
+	    else if ( buffer.charAt( c ) == 'Ã¼' ) {
 		buffer.setCharAt( c, 'u' );
 	    }
 	    // Take care that at least one character is left left side from the current one
 	    if ( c < buffer.length() - 1 ) {
-		if ( buffer.charAt( c ) == 'ß' ) {
+		if ( buffer.charAt( c ) == 'ÃŸ' ) {
 		    buffer.setCharAt( c, 's' );
 		    buffer.insert( c + 1, 's' );
 		    substCount++;
@@ -238,7 +238,7 @@
 		    substCount =+ 2;
 		}
 		else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {
-		    buffer.setCharAt( c, '§' );
+		    buffer.setCharAt( c, 'Â§' );
 		    buffer.deleteCharAt( c + 1 );
 		    substCount++;
 		}
@@ -269,7 +269,7 @@
     /**
      * Undoes the changes made by substitute(). That are character pairs and
      * character combinations. Umlauts will remain as their corresponding vowel,
-     * as "ß" remains as "ss".
+     * as "ÃŸ" remains as "ss".
      */
     private void resubstitute( StringBuffer buffer )
     {
@@ -282,7 +282,7 @@
 		buffer.setCharAt( c, 's' );
 		buffer.insert( c + 1, new char[]{'c', 'h'}, 0, 2 );
 	    }
-	    else if ( buffer.charAt( c ) == '§' ) {
+	    else if ( buffer.charAt( c ) == 'Â§' ) {
 		buffer.setCharAt( c, 'c' );
 		buffer.insert( c + 1, 'h' );
 	    }
--- lucene-1.3-final/src/java/org/apache/lucene/queryParser/QueryParser.java	Wed Nov 26 03:00:58 2003
+++ lucene-1.3-final-patched/src/java/org/apache/lucene/queryParser/QueryParser.java	Thu Jan  8 09:27:52 2004
@@ -801,13 +801,13 @@
   static private int[] jj_la1_0;
   static private int[] jj_la1_1;
   static {
-      jj_la1_0();
-      jj_la1_1();
+      jj_la1_0_mth();
+      jj_la1_1_mth();
    }
-   private static void jj_la1_0() {
+   private static void jj_la1_0_mth() {
       jj_la1_0 = new int[] {0x180,0x180,0xe00,0xe00,0x1f31f80,0x8000,0x1f31000,0x1320000,0x40000,0x40000,0x8000,0x18000000,0x2000000,0x18000000,0x8000,0x80000000,0x20000000,0x80000000,0x8000,0x80000,0x8000,0x1f30000,};
    }
-   private static void jj_la1_1() {
+   private static void jj_la1_1_mth() {
       jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,};
    }
   final private JJCalls[] jj_2_rtns = new JJCalls[1];
--- lucene-1.3-final/src/java/org/apache/lucene/index/IndexReader.java	Mon Dec 15 15:04:42 2003
+++ lucene-1.3-final-patched/src/java/org/apache/lucene/index/IndexReader.java	Sun May 30 01:26:59 2004
@@ -362,7 +362,7 @@
     reflected in the {@link #docFreq} statistic, though
     this will be corrected eventually as the index is further modified.
   */
-  public final synchronized void delete(int docNum) throws IOException {
+  public final synchronized void deleteDocument(int docNum) throws IOException {
     if(stale)
       throw new IOException("IndexReader out of date and no longer valid for deletion");
       
@@ -385,7 +385,7 @@
   }
 
   /** Implements deletion of the document numbered <code>docNum</code>.
-   * Applications should call {@link #delete(int)} or {@link #delete(Term)}.
+   * Applications should call {@link #deleteDocument(int)} or {@link #deleteDocuments(Term)}.
    */
   protected abstract void doDelete(int docNum) throws IOException;
 
@@ -395,13 +395,13 @@
     term with the appropriate field and the unique ID string as its text and
     passes it to this method.  Returns the number of documents deleted.
   */
-  public final int delete(Term term) throws IOException {
+  public final int deleteDocuments(Term term) throws IOException {
     TermDocs docs = termDocs(term);
     if ( docs == null ) return 0;
     int n = 0;
     try {
       while (docs.next()) {
-        delete(docs.doc());
+        deleteDocument(docs.doc());
         n++;
       }
     } finally {
