/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.20
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_jboolean swig_types[0] 
#define  SWIGTYPE_p_org__apache__lucene__search__Hits swig_types[1] 
#define  SWIGTYPE_p_org__apache__lucene__search__Searcher swig_types[2] 
#define  SWIGTYPE_p_org__apache__lucene__analysis__Analyzer swig_types[3] 
#define  SWIGTYPE_p_org__apache__lucene__search__IndexSearcher swig_types[4] 
#define  SWIGTYPE_p_org__apache__lucene__queryParser__QueryParser swig_types[5] 
#define  SWIGTYPE_p_jdb swig_types[6] 
#define  SWIGTYPE_p_org__apache__lucene__document__Field swig_types[7] 
#define  SWIGTYPE_p_jstring swig_types[8] 
#define  SWIGTYPE_p_org__apache__lucene__analysis__standard__StandardAnalyzer swig_types[9] 
#define  SWIGTYPE_p_void swig_types[10] 
#define  SWIGTYPE_p_org__apache__lucene__search__Query swig_types[11] 
#define  SWIGTYPE_p_jreader swig_types[12] 
#define  SWIGTYPE_p_java__io__Reader swig_types[13] 
#define  SWIGTYPE_p_org__apache__lucene__index__IndexWriter swig_types[14] 
#define  SWIGTYPE_p_org__apache__lucene__store__db__DbDirectory swig_types[15] 
#define  SWIGTYPE_p_org__apache__lucene__store__Directory swig_types[16] 
#define  SWIGTYPE_p_java__lang__Object swig_types[17] 
#define  SWIGTYPE_p_jdbtxn swig_types[18] 
#define  SWIGTYPE_p_org__apache__lucene__document__Document swig_types[19] 
static swig_type_info *swig_types[21];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _PyLucene.so
  ------------------------------------------------*/
#define SWIG_init    init_PyLucene

#define SWIG_name    "_PyLucene"


#include <gcj/cni.h>
#include <java/lang/Object.h>
#include <java/lang/Thread.h>
#include <java/lang/ThreadGroup.h>
#include <java/lang/Runnable.h>
#include <java/lang/String.h>
#include <java/lang/Throwable.h>
#include <java/io/StringWriter.h>
#include <java/io/PrintWriter.h>
#include <java/io/Reader.h>

#include "com/sleepycat/db/DbEnv.h"
#include "com/sleepycat/db/Db.h"
#include "com/sleepycat/db/DbTxn.h"

#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/db/DbDirectory.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/analysis/standard/StandardAnalyzer.h"
#include "org/apache/lucene/document/Field.h"
#include "org/apache/lucene/document/Document.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/queryParser/QueryParser.h"
#include "org/apache/lucene/search/Searcher.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/Hits.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/osafoundation/io/PythonReader.h"

#include <db.h>

/* from Python's _bsddb.c */
typedef struct {
    PyObject_HEAD
    DB_ENV *db_env;
} DBEnvObject;

typedef struct {
    PyObject_HEAD
    DB *db;
} DBObject;

typedef struct {
    PyObject_HEAD
    DB_TXN *txn;
} DBTxnObject;

typedef ::com::sleepycat::db::DbEnv *jdbenv;
typedef ::com::sleepycat::db::Db *jdb;
typedef ::com::sleepycat::db::DbTxn *jdbtxn;
typedef ::java::io::Reader *jreader;


#ifndef WIN32

extern "C" {
    void *GC_start_routine(void *arg);
}

static java::lang::Thread *nextThread;

static void *run(void *pyThread)
{
    _Jv_AttachCurrentThread(nextThread);
    nextThread = new java::lang::Thread();
    
    return PyObject_CallMethod((PyObject *) pyThread, "run", NULL);
}

void *attachCurrentThread(PyObject *pyThread)
{
    struct start_info {
        void *(*start_routine)(void *);
        void *arg;
        unsigned int flags;
        unsigned int registered;
    } si;

    si.registered = 0;
    si.start_routine = run;
    si.arg = pyThread;
    si.flags = 0;

    return GC_start_routine(&si);
}

#else

void *attachCurrentThread(PyObject *pyThread)
{
    JvAttachCurrentThread(NULL, NULL);

    return PyObject_CallMethod((PyObject *) pyThread, "run", NULL);
}

#endif


#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_Object(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    java::lang::Object *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Object")) goto fail;
    {
        try {
            result = (java::lang::Object *)new java::lang::Object();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_java__lang__Object, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Object(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    java::lang::Object *arg1 = (java::lang::Object *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Object",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_java__lang__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Object_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_java__lang__Object, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * Reader_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_java__io__Reader, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_attachCurrentThread(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    void *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:attachCurrentThread",&obj0)) goto fail;
    arg1 = obj0;
    {
        try {
            result = (void *)attachCurrentThread(arg1);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_void, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Directory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::store::Directory *arg1 = (org::apache::lucene::store::Directory *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Directory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__store__Directory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Directory_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__store__Directory, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DbDirectory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    jdbtxn arg1 ;
    jdb arg2 ;
    jdb arg3 ;
    jint arg4 ;
    org::apache::lucene::store::db::DbDirectory *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOi:new_DbDirectory",&obj0,&obj1,&obj2,&arg4)) goto fail;
    {
        if (obj0 == Py_None)
        arg1 = NULL;
        else
        {
            jlong ptr;
            
            *(DB_TXN **) &ptr = ((DBTxnObject *) obj0)->txn;
            arg1 = new com::sleepycat::db::DbTxn(ptr, 0);
        }
    }
    {
        if (obj1 == Py_None)
        arg2 = NULL;
        else
        {
            jlong ptr;
            
            *(DB **) &ptr = ((DBObject *) obj1)->db;
            arg2 = new ::com::sleepycat::db::Db(ptr, 0);
        }
    }
    {
        if (obj2 == Py_None)
        arg3 = NULL;
        else
        {
            jlong ptr;
            
            *(DB **) &ptr = ((DBObject *) obj2)->db;
            arg3 = new ::com::sleepycat::db::Db(ptr, 0);
        }
    }
    {
        try {
            result = (org::apache::lucene::store::db::DbDirectory *)new org::apache::lucene::store::db::DbDirectory(arg1,arg2,arg3,arg4);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__store__db__DbDirectory, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DbDirectory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::store::db::DbDirectory *arg1 = (org::apache::lucene::store::db::DbDirectory *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DbDirectory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__store__db__DbDirectory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DbDirectory_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__store__db__DbDirectory, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Analyzer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::analysis::Analyzer *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Analyzer")) goto fail;
    {
        try {
            result = (org::apache::lucene::analysis::Analyzer *)new org::apache::lucene::analysis::Analyzer();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__analysis__Analyzer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Analyzer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::analysis::Analyzer *arg1 = (org::apache::lucene::analysis::Analyzer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Analyzer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__analysis__Analyzer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Analyzer_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__analysis__Analyzer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_StandardAnalyzer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::analysis::standard::StandardAnalyzer *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_StandardAnalyzer")) goto fail;
    {
        try {
            result = (org::apache::lucene::analysis::standard::StandardAnalyzer *)new org::apache::lucene::analysis::standard::StandardAnalyzer();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__analysis__standard__StandardAnalyzer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_StandardAnalyzer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::analysis::standard::StandardAnalyzer *arg1 = (org::apache::lucene::analysis::standard::StandardAnalyzer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_StandardAnalyzer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__analysis__standard__StandardAnalyzer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * StandardAnalyzer_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__analysis__standard__StandardAnalyzer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Field(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    jstring arg1 ;
    jstring arg2 ;
    jboolean arg3 ;
    jboolean arg4 ;
    jboolean arg5 ;
    org::apache::lucene::document::Field *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_Field",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        if (obj0 == Py_None)
        arg1 = NULL;
        else
        arg1 = JvNewStringUTF(PyString_AsString(obj0));
    }
    {
        if (obj1 == Py_None)
        arg2 = NULL;
        else
        arg2 = JvNewStringUTF(PyString_AsString(obj1));
    }
    {
        arg3 = PyObject_IsTrue(obj2);
    }
    {
        arg4 = PyObject_IsTrue(obj3);
    }
    {
        arg5 = PyObject_IsTrue(obj4);
    }
    {
        try {
            result = (org::apache::lucene::document::Field *)new org::apache::lucene::document::Field(arg1,arg2,arg3,arg4,arg5);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__document__Field, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Field_Text(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    jstring arg1 ;
    jreader arg2 ;
    org::apache::lucene::document::Field *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Field_Text",&obj0,&obj1)) goto fail;
    {
        if (obj0 == Py_None)
        arg1 = NULL;
        else
        arg1 = JvNewStringUTF(PyString_AsString(obj0));
    }
    {
        if (obj1 == Py_None)
        arg2 = NULL;
        else
        {
            jlong ptr;
            
            *(PyObject **) &ptr = (PyObject *) obj1;
            arg2 = new org::osafoundation::io::PythonReader(ptr);
        }
    }
    {
        try {
            result = (org::apache::lucene::document::Field *)org::apache::lucene::document::Field::Text(arg1,arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__document__Field, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Field_UnIndexed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    jstring arg1 ;
    jstring arg2 ;
    org::apache::lucene::document::Field *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Field_UnIndexed",&obj0,&obj1)) goto fail;
    {
        if (obj0 == Py_None)
        arg1 = NULL;
        else
        arg1 = JvNewStringUTF(PyString_AsString(obj0));
    }
    {
        if (obj1 == Py_None)
        arg2 = NULL;
        else
        arg2 = JvNewStringUTF(PyString_AsString(obj1));
    }
    {
        try {
            result = (org::apache::lucene::document::Field *)org::apache::lucene::document::Field::UnIndexed(arg1,arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__document__Field, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Field_UnStored(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    jstring arg1 ;
    jstring arg2 ;
    org::apache::lucene::document::Field *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Field_UnStored",&obj0,&obj1)) goto fail;
    {
        if (obj0 == Py_None)
        arg1 = NULL;
        else
        arg1 = JvNewStringUTF(PyString_AsString(obj0));
    }
    {
        if (obj1 == Py_None)
        arg2 = NULL;
        else
        arg2 = JvNewStringUTF(PyString_AsString(obj1));
    }
    {
        try {
            result = (org::apache::lucene::document::Field *)org::apache::lucene::document::Field::UnStored(arg1,arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__document__Field, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Field(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::document::Field *arg1 = (org::apache::lucene::document::Field *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Field",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__document__Field,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Field_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__document__Field, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Document(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::document::Document *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Document")) goto fail;
    {
        try {
            result = (org::apache::lucene::document::Document *)new org::apache::lucene::document::Document();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__document__Document, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Document_add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::document::Document *arg1 = (org::apache::lucene::document::Document *) 0 ;
    org::apache::lucene::document::Field *arg2 = (org::apache::lucene::document::Field *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Document_add",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__document__Document,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_org__apache__lucene__document__Field,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->add(arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Document_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::document::Document *arg1 = (org::apache::lucene::document::Document *) 0 ;
    jstring arg2 ;
    jstring result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Document_get",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__document__Document,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (obj1 == Py_None)
        arg2 = NULL;
        else
        arg2 = JvNewStringUTF(PyString_AsString(obj1));
    }
    {
        try {
            result = (arg1)->get(arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    {
        if (!result)
        resultobj = Py_None;
        else
        {
            jint len = JvGetStringUTFLength(result);
            char buf[len + 1];
            
            JvGetStringUTFRegion(result, 0, len, buf);
            buf[len] = '\0';
            
            resultobj = Py_BuildValue("s#", buf, len);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Document(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::document::Document *arg1 = (org::apache::lucene::document::Document *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Document",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__document__Document,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Document_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__document__Document, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IndexWriter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::store::Directory *arg1 = (org::apache::lucene::store::Directory *) 0 ;
    org::apache::lucene::analysis::Analyzer *arg2 = (org::apache::lucene::analysis::Analyzer *) 0 ;
    jboolean arg3 ;
    org::apache::lucene::index::IndexWriter *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_IndexWriter",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__store__Directory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_org__apache__lucene__analysis__Analyzer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg3 = PyObject_IsTrue(obj2);
    }
    {
        try {
            result = (org::apache::lucene::index::IndexWriter *)new org::apache::lucene::index::IndexWriter(arg1,arg2,arg3);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__index__IndexWriter, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexWriter_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->close();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_addDocument(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    org::apache::lucene::document::Document *arg2 = (org::apache::lucene::document::Document *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IndexWriter_addDocument",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_org__apache__lucene__document__Document,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->addDocument(arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_optimize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexWriter_optimize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->optimize();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_maxFieldLength_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    jint arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IndexWriter_maxFieldLength_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->maxFieldLength = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_maxFieldLength_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    jint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexWriter_maxFieldLength_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (jint) ((arg1)->maxFieldLength);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_mergeFactor_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    jint arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IndexWriter_mergeFactor_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->mergeFactor = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_mergeFactor_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    jint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexWriter_mergeFactor_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (jint) ((arg1)->mergeFactor);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_minMergeDocs_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    jint arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IndexWriter_minMergeDocs_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->minMergeDocs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_minMergeDocs_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    jint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexWriter_minMergeDocs_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (jint) ((arg1)->minMergeDocs);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_maxMergeDocs_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    jint arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IndexWriter_maxMergeDocs_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->maxMergeDocs = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexWriter_maxMergeDocs_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    jint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexWriter_maxMergeDocs_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (jint) ((arg1)->maxMergeDocs);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IndexWriter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::index::IndexWriter *arg1 = (org::apache::lucene::index::IndexWriter *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IndexWriter",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__index__IndexWriter,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IndexWriter_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__index__IndexWriter, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Query_setBoost(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::Query *arg1 = (org::apache::lucene::search::Query *) 0 ;
    jfloat arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Query_setBoost",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__Query,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->setBoost(arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Query_getBoost(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::Query *arg1 = (org::apache::lucene::search::Query *) 0 ;
    jfloat result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Query_getBoost",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__Query,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (jfloat)(arg1)->getBoost();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Query_toString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::Query *arg1 = (org::apache::lucene::search::Query *) 0 ;
    jstring result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Query_toString",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__Query,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->toString();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    {
        if (!result)
        resultobj = Py_None;
        else
        {
            jint len = JvGetStringUTFLength(result);
            char buf[len + 1];
            
            JvGetStringUTFRegion(result, 0, len, buf);
            buf[len] = '\0';
            
            resultobj = Py_BuildValue("s#", buf, len);
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Query_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__search__Query, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Hits_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::Hits *arg1 = (org::apache::lucene::search::Hits *) 0 ;
    jint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Hits_length",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__Hits,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (jint)(arg1)->length();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Hits_doc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::Hits *arg1 = (org::apache::lucene::search::Hits *) 0 ;
    jint arg2 ;
    org::apache::lucene::document::Document *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Hits_doc",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__Hits,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (org::apache::lucene::document::Document *)(arg1)->doc(arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__document__Document, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Hits_score(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::Hits *arg1 = (org::apache::lucene::search::Hits *) 0 ;
    jint arg2 ;
    jfloat result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Hits_score",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__Hits,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (jfloat)(arg1)->score(arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Hits_id(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::Hits *arg1 = (org::apache::lucene::search::Hits *) 0 ;
    jint arg2 ;
    jint result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Hits_id",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__Hits,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (jint)(arg1)->id(arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Hits_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__search__Hits, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Searcher_search(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::Searcher *arg1 = (org::apache::lucene::search::Searcher *) 0 ;
    org::apache::lucene::search::Query *arg2 = (org::apache::lucene::search::Query *) 0 ;
    org::apache::lucene::search::Hits *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Searcher_search",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__Searcher,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_org__apache__lucene__search__Query,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (org::apache::lucene::search::Hits *)(arg1)->search(arg2);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__search__Hits, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Searcher_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__search__Searcher, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IndexSearcher(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::store::Directory *arg1 = (org::apache::lucene::store::Directory *) 0 ;
    org::apache::lucene::search::IndexSearcher *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_IndexSearcher",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__store__Directory,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (org::apache::lucene::search::IndexSearcher *)new org::apache::lucene::search::IndexSearcher(arg1);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__search__IndexSearcher, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IndexSearcher_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::IndexSearcher *arg1 = (org::apache::lucene::search::IndexSearcher *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IndexSearcher_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__IndexSearcher,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->close();
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IndexSearcher(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    org::apache::lucene::search::IndexSearcher *arg1 = (org::apache::lucene::search::IndexSearcher *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IndexSearcher",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_org__apache__lucene__search__IndexSearcher,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IndexSearcher_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__search__IndexSearcher, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_QueryParser_parse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    jstring arg1 ;
    jstring arg2 ;
    org::apache::lucene::analysis::Analyzer *arg3 = (org::apache::lucene::analysis::Analyzer *) 0 ;
    org::apache::lucene::search::Query *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:QueryParser_parse",&obj0,&obj1,&obj2)) goto fail;
    {
        if (obj0 == Py_None)
        arg1 = NULL;
        else
        arg1 = JvNewStringUTF(PyString_AsString(obj0));
    }
    {
        if (obj1 == Py_None)
        arg2 = NULL;
        else
        arg2 = JvNewStringUTF(PyString_AsString(obj1));
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_org__apache__lucene__analysis__Analyzer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (org::apache::lucene::search::Query *)org::apache::lucene::queryParser::QueryParser::parse(arg1,arg2,arg3);
            
            if (PyErr_Occurred())
            return NULL;
        } catch (java::lang::Throwable *e) {
            java::io::StringWriter *buffer = new java::io::StringWriter();
            java::io::PrintWriter *writer = new java::io::PrintWriter(buffer);
            
            e->printStackTrace(writer);
            writer->close();
            
            jstring message = buffer->toString();
            jint len = JvGetStringUTFLength(message);
            char buf[len + 1];
            
            JvGetStringUTFRegion(message, 0, len, buf);
            buf[len] = '\0';
            PyErr_SetString(PyExc_ValueError, buf);
            
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_org__apache__lucene__search__Query, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * QueryParser_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_org__apache__lucene__queryParser__QueryParser, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_Object", _wrap_new_Object, METH_VARARGS },
	 { (char *)"delete_Object", _wrap_delete_Object, METH_VARARGS },
	 { (char *)"Object_swigregister", Object_swigregister, METH_VARARGS },
	 { (char *)"Reader_swigregister", Reader_swigregister, METH_VARARGS },
	 { (char *)"attachCurrentThread", _wrap_attachCurrentThread, METH_VARARGS },
	 { (char *)"delete_Directory", _wrap_delete_Directory, METH_VARARGS },
	 { (char *)"Directory_swigregister", Directory_swigregister, METH_VARARGS },
	 { (char *)"new_DbDirectory", _wrap_new_DbDirectory, METH_VARARGS },
	 { (char *)"delete_DbDirectory", _wrap_delete_DbDirectory, METH_VARARGS },
	 { (char *)"DbDirectory_swigregister", DbDirectory_swigregister, METH_VARARGS },
	 { (char *)"new_Analyzer", _wrap_new_Analyzer, METH_VARARGS },
	 { (char *)"delete_Analyzer", _wrap_delete_Analyzer, METH_VARARGS },
	 { (char *)"Analyzer_swigregister", Analyzer_swigregister, METH_VARARGS },
	 { (char *)"new_StandardAnalyzer", _wrap_new_StandardAnalyzer, METH_VARARGS },
	 { (char *)"delete_StandardAnalyzer", _wrap_delete_StandardAnalyzer, METH_VARARGS },
	 { (char *)"StandardAnalyzer_swigregister", StandardAnalyzer_swigregister, METH_VARARGS },
	 { (char *)"new_Field", _wrap_new_Field, METH_VARARGS },
	 { (char *)"Field_Text", _wrap_Field_Text, METH_VARARGS },
	 { (char *)"Field_UnIndexed", _wrap_Field_UnIndexed, METH_VARARGS },
	 { (char *)"Field_UnStored", _wrap_Field_UnStored, METH_VARARGS },
	 { (char *)"delete_Field", _wrap_delete_Field, METH_VARARGS },
	 { (char *)"Field_swigregister", Field_swigregister, METH_VARARGS },
	 { (char *)"new_Document", _wrap_new_Document, METH_VARARGS },
	 { (char *)"Document_add", _wrap_Document_add, METH_VARARGS },
	 { (char *)"Document_get", _wrap_Document_get, METH_VARARGS },
	 { (char *)"delete_Document", _wrap_delete_Document, METH_VARARGS },
	 { (char *)"Document_swigregister", Document_swigregister, METH_VARARGS },
	 { (char *)"new_IndexWriter", _wrap_new_IndexWriter, METH_VARARGS },
	 { (char *)"IndexWriter_close", _wrap_IndexWriter_close, METH_VARARGS },
	 { (char *)"IndexWriter_addDocument", _wrap_IndexWriter_addDocument, METH_VARARGS },
	 { (char *)"IndexWriter_optimize", _wrap_IndexWriter_optimize, METH_VARARGS },
	 { (char *)"IndexWriter_maxFieldLength_set", _wrap_IndexWriter_maxFieldLength_set, METH_VARARGS },
	 { (char *)"IndexWriter_maxFieldLength_get", _wrap_IndexWriter_maxFieldLength_get, METH_VARARGS },
	 { (char *)"IndexWriter_mergeFactor_set", _wrap_IndexWriter_mergeFactor_set, METH_VARARGS },
	 { (char *)"IndexWriter_mergeFactor_get", _wrap_IndexWriter_mergeFactor_get, METH_VARARGS },
	 { (char *)"IndexWriter_minMergeDocs_set", _wrap_IndexWriter_minMergeDocs_set, METH_VARARGS },
	 { (char *)"IndexWriter_minMergeDocs_get", _wrap_IndexWriter_minMergeDocs_get, METH_VARARGS },
	 { (char *)"IndexWriter_maxMergeDocs_set", _wrap_IndexWriter_maxMergeDocs_set, METH_VARARGS },
	 { (char *)"IndexWriter_maxMergeDocs_get", _wrap_IndexWriter_maxMergeDocs_get, METH_VARARGS },
	 { (char *)"delete_IndexWriter", _wrap_delete_IndexWriter, METH_VARARGS },
	 { (char *)"IndexWriter_swigregister", IndexWriter_swigregister, METH_VARARGS },
	 { (char *)"Query_setBoost", _wrap_Query_setBoost, METH_VARARGS },
	 { (char *)"Query_getBoost", _wrap_Query_getBoost, METH_VARARGS },
	 { (char *)"Query_toString", _wrap_Query_toString, METH_VARARGS },
	 { (char *)"Query_swigregister", Query_swigregister, METH_VARARGS },
	 { (char *)"Hits_length", _wrap_Hits_length, METH_VARARGS },
	 { (char *)"Hits_doc", _wrap_Hits_doc, METH_VARARGS },
	 { (char *)"Hits_score", _wrap_Hits_score, METH_VARARGS },
	 { (char *)"Hits_id", _wrap_Hits_id, METH_VARARGS },
	 { (char *)"Hits_swigregister", Hits_swigregister, METH_VARARGS },
	 { (char *)"Searcher_search", _wrap_Searcher_search, METH_VARARGS },
	 { (char *)"Searcher_swigregister", Searcher_swigregister, METH_VARARGS },
	 { (char *)"new_IndexSearcher", _wrap_new_IndexSearcher, METH_VARARGS },
	 { (char *)"IndexSearcher_close", _wrap_IndexSearcher_close, METH_VARARGS },
	 { (char *)"delete_IndexSearcher", _wrap_delete_IndexSearcher, METH_VARARGS },
	 { (char *)"IndexSearcher_swigregister", IndexSearcher_swigregister, METH_VARARGS },
	 { (char *)"QueryParser_parse", _wrap_QueryParser_parse, METH_VARARGS },
	 { (char *)"QueryParser_swigregister", QueryParser_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_org__apache__lucene__analysis__standard__StandardAnalyzerTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *) (org::apache::lucene::analysis::Analyzer *) ((org::apache::lucene::analysis::standard::StandardAnalyzer *) x));
}
static void *_p_java__io__ReaderTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((java::io::Reader *) x));
}
static void *_p_org__apache__lucene__analysis__AnalyzerTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::analysis::Analyzer *) x));
}
static void *_p_org__apache__lucene__search__SearcherTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::search::Searcher *) x));
}
static void *_p_org__apache__lucene__search__IndexSearcherTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *) (org::apache::lucene::search::Searcher *) ((org::apache::lucene::search::IndexSearcher *) x));
}
static void *_p_org__apache__lucene__queryParser__QueryParserTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::queryParser::QueryParser *) x));
}
static void *_p_org__apache__lucene__document__FieldTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::document::Field *) x));
}
static void *_p_org__apache__lucene__document__DocumentTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::document::Document *) x));
}
static void *_p_org__apache__lucene__search__HitsTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::search::Hits *) x));
}
static void *_p_org__apache__lucene__store__DirectoryTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::store::Directory *) x));
}
static void *_p_org__apache__lucene__store__db__DbDirectoryTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *) (org::apache::lucene::store::Directory *) ((org::apache::lucene::store::db::DbDirectory *) x));
}
static void *_p_org__apache__lucene__index__IndexWriterTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::index::IndexWriter *) x));
}
static void *_p_org__apache__lucene__search__QueryTo_p_java__lang__Object(void *x) {
    return (void *)((java::lang::Object *)  ((org::apache::lucene::search::Query *) x));
}
static void *_p_org__apache__lucene__search__IndexSearcherTo_p_org__apache__lucene__search__Searcher(void *x) {
    return (void *)((org::apache::lucene::search::Searcher *)  ((org::apache::lucene::search::IndexSearcher *) x));
}
static void *_p_org__apache__lucene__analysis__standard__StandardAnalyzerTo_p_org__apache__lucene__analysis__Analyzer(void *x) {
    return (void *)((org::apache::lucene::analysis::Analyzer *)  ((org::apache::lucene::analysis::standard::StandardAnalyzer *) x));
}
static void *_p_org__apache__lucene__store__db__DbDirectoryTo_p_org__apache__lucene__store__Directory(void *x) {
    return (void *)((org::apache::lucene::store::Directory *)  ((org::apache::lucene::store::db::DbDirectory *) x));
}
static swig_type_info _swigt__p_jboolean[] = {{"_p_jboolean", 0, "jboolean *", 0},{"_p_jboolean"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__search__Hits[] = {{"_p_org__apache__lucene__search__Hits", 0, "org::apache::lucene::search::Hits *", 0},{"_p_org__apache__lucene__search__Hits"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__search__Searcher[] = {{"_p_org__apache__lucene__search__Searcher", 0, "org::apache::lucene::search::Searcher *", 0},{"_p_org__apache__lucene__search__Searcher"},{"_p_org__apache__lucene__search__IndexSearcher", _p_org__apache__lucene__search__IndexSearcherTo_p_org__apache__lucene__search__Searcher},{0}};
static swig_type_info _swigt__p_org__apache__lucene__analysis__Analyzer[] = {{"_p_org__apache__lucene__analysis__Analyzer", 0, "org::apache::lucene::analysis::Analyzer *", 0},{"_p_org__apache__lucene__analysis__standard__StandardAnalyzer", _p_org__apache__lucene__analysis__standard__StandardAnalyzerTo_p_org__apache__lucene__analysis__Analyzer},{"_p_org__apache__lucene__analysis__Analyzer"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__search__IndexSearcher[] = {{"_p_org__apache__lucene__search__IndexSearcher", 0, "org::apache::lucene::search::IndexSearcher *", 0},{"_p_org__apache__lucene__search__IndexSearcher"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__queryParser__QueryParser[] = {{"_p_org__apache__lucene__queryParser__QueryParser", 0, "org::apache::lucene::queryParser::QueryParser *", 0},{"_p_org__apache__lucene__queryParser__QueryParser"},{0}};
static swig_type_info _swigt__p_jdb[] = {{"_p_jdb", 0, "jdb *", 0},{"_p_jdb"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__document__Field[] = {{"_p_org__apache__lucene__document__Field", 0, "org::apache::lucene::document::Field *", 0},{"_p_org__apache__lucene__document__Field"},{0}};
static swig_type_info _swigt__p_jstring[] = {{"_p_jstring", 0, "jstring *", 0},{"_p_jstring"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__analysis__standard__StandardAnalyzer[] = {{"_p_org__apache__lucene__analysis__standard__StandardAnalyzer", 0, "org::apache::lucene::analysis::standard::StandardAnalyzer *", 0},{"_p_org__apache__lucene__analysis__standard__StandardAnalyzer"},{0}};
static swig_type_info _swigt__p_void[] = {{"_p_void", 0, "void *", 0},{"_p_void"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__search__Query[] = {{"_p_org__apache__lucene__search__Query", 0, "org::apache::lucene::search::Query *", 0},{"_p_org__apache__lucene__search__Query"},{0}};
static swig_type_info _swigt__p_jreader[] = {{"_p_jreader", 0, "jreader *", 0},{"_p_jreader"},{0}};
static swig_type_info _swigt__p_java__io__Reader[] = {{"_p_java__io__Reader", 0, "java::io::Reader *", 0},{"_p_java__io__Reader"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__index__IndexWriter[] = {{"_p_org__apache__lucene__index__IndexWriter", 0, "org::apache::lucene::index::IndexWriter *", 0},{"_p_org__apache__lucene__index__IndexWriter"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__store__db__DbDirectory[] = {{"_p_org__apache__lucene__store__db__DbDirectory", 0, "org::apache::lucene::store::db::DbDirectory *", 0},{"_p_org__apache__lucene__store__db__DbDirectory"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__store__Directory[] = {{"_p_org__apache__lucene__store__Directory", 0, "org::apache::lucene::store::Directory *", 0},{"_p_org__apache__lucene__store__Directory"},{"_p_org__apache__lucene__store__db__DbDirectory", _p_org__apache__lucene__store__db__DbDirectoryTo_p_org__apache__lucene__store__Directory},{0}};
static swig_type_info _swigt__p_java__lang__Object[] = {{"_p_java__lang__Object", 0, "java::lang::Object *", 0},{"_p_org__apache__lucene__search__Hits", _p_org__apache__lucene__search__HitsTo_p_java__lang__Object},{"_p_org__apache__lucene__analysis__Analyzer", _p_org__apache__lucene__analysis__AnalyzerTo_p_java__lang__Object},{"_p_org__apache__lucene__search__Searcher", _p_org__apache__lucene__search__SearcherTo_p_java__lang__Object},{"_p_org__apache__lucene__search__IndexSearcher", _p_org__apache__lucene__search__IndexSearcherTo_p_java__lang__Object},{"_p_org__apache__lucene__queryParser__QueryParser", _p_org__apache__lucene__queryParser__QueryParserTo_p_java__lang__Object},{"_p_org__apache__lucene__document__Field", _p_org__apache__lucene__document__FieldTo_p_java__lang__Object},{"_p_org__apache__lucene__analysis__standard__StandardAnalyzer", _p_org__apache__lucene__analysis__standard__StandardAnalyzerTo_p_java__lang__Object},{"_p_org__apache__lucene__search__Query", _p_org__apache__lucene__search__QueryTo_p_java__lang__Object},{"_p_java__io__Reader", _p_java__io__ReaderTo_p_java__lang__Object},{"_p_org__apache__lucene__index__IndexWriter", _p_org__apache__lucene__index__IndexWriterTo_p_java__lang__Object},{"_p_org__apache__lucene__store__Directory", _p_org__apache__lucene__store__DirectoryTo_p_java__lang__Object},{"_p_org__apache__lucene__store__db__DbDirectory", _p_org__apache__lucene__store__db__DbDirectoryTo_p_java__lang__Object},{"_p_org__apache__lucene__document__Document", _p_org__apache__lucene__document__DocumentTo_p_java__lang__Object},{"_p_java__lang__Object"},{0}};
static swig_type_info _swigt__p_jdbtxn[] = {{"_p_jdbtxn", 0, "jdbtxn *", 0},{"_p_jdbtxn"},{0}};
static swig_type_info _swigt__p_org__apache__lucene__document__Document[] = {{"_p_org__apache__lucene__document__Document", 0, "org::apache::lucene::document::Document *", 0},{"_p_org__apache__lucene__document__Document"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_jboolean, 
_swigt__p_org__apache__lucene__search__Hits, 
_swigt__p_org__apache__lucene__search__Searcher, 
_swigt__p_org__apache__lucene__analysis__Analyzer, 
_swigt__p_org__apache__lucene__search__IndexSearcher, 
_swigt__p_org__apache__lucene__queryParser__QueryParser, 
_swigt__p_jdb, 
_swigt__p_org__apache__lucene__document__Field, 
_swigt__p_jstring, 
_swigt__p_org__apache__lucene__analysis__standard__StandardAnalyzer, 
_swigt__p_void, 
_swigt__p_org__apache__lucene__search__Query, 
_swigt__p_jreader, 
_swigt__p_java__io__Reader, 
_swigt__p_org__apache__lucene__index__IndexWriter, 
_swigt__p_org__apache__lucene__store__db__DbDirectory, 
_swigt__p_org__apache__lucene__store__Directory, 
_swigt__p_java__lang__Object, 
_swigt__p_jdbtxn, 
_swigt__p_org__apache__lucene__document__Document, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    
    JvCreateJavaVM(NULL);
    JvAttachCurrentThread(NULL, NULL);
#ifndef WIN32
    nextThread = new java::lang::Thread();
#endif
    JvInitClass(&org::apache::lucene::document::Field::class$);
    JvInitClass(&org::apache::lucene::queryParser::QueryParser::class$);
    
}

